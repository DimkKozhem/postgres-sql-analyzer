"""–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è PostgreSQL SQL Analyzer."""

import streamlit as st

from app.config import get_default_config
from app.ui import (
    apply_custom_styles,
    show_connection_status,
    show_db_overview_tab,
    show_db_config_tab,
    show_statistics_tab,
    show_explain_analysis_tab,
    show_metrics_tab,
    show_logging_tab,
    show_help_tab
)


def test_db_connection(dsn):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        from app.analyzer import SQLAnalyzer
        analyzer = SQLAnalyzer(dsn, mock_mode=False)
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
        test_result = analyzer.analyze_sql("SELECT 1 as test;")
        return True, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞."
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="PostgreSQL SQL Analyzer",
        page_icon="üêò",
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items={
            'Get Help': 'https://github.com/your-repo/postgres-sql-analyzer',
            'Report a bug': "https://github.com/your-repo/postgres-sql-analyzer/issues",
            'About': "# PostgreSQL SQL Analyzer\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤"
        }
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
    apply_custom_styles()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown("""
    <div class="main-header">
        <h1>üêò PostgreSQL SQL Analyzer</h1>
        <p style="font-size: 1.2rem; margin: 0;">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ PostgreSQL</p>
        <p style="font-size: 1rem; margin: 0; opacity: 0.9;">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤</p>
    </div>
    """, unsafe_allow_html=True)

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        st.markdown("### üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")

        # –¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_type = st.selectbox(
            "–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            ["SSH —Ç—É–Ω–Ω–µ–ª—å", "–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "Mock —Ä–µ–∂–∏–º"],
            index=0,
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        )

        if connection_type == "Mock —Ä–µ–∂–∏–º":
            st.info("üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            mock_mode = True
            dsn = ""
            host = "localhost"
            port = 5433
            database = "postgres"
            username = "readonly_user"
            password = "skripka_user"
        else:
            mock_mode = False

            # SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            if connection_type == "SSH —Ç—É–Ω–Ω–µ–ª—å":
                st.markdown("#### üîê SSH —Ç—É–Ω–Ω–µ–ª—å")
                col1, col2 = st.columns(2)
                with col1:
                    ssh_host = st.text_input("SSH —Ö–æ—Å—Ç", value="193.246.150.18", help="IP –∞–¥—Ä–µ—Å SSH —Å–µ—Ä–≤–µ—Ä–∞")
                with col2:
                    ssh_port = st.number_input("SSH –ø–æ—Ä—Ç", value=22, min_value=1, max_value=65535)

                ssh_user = st.text_input("SSH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value="skripka", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SSH")
                ssh_key_path = st.text_input("–ü—É—Ç—å –∫ SSH –∫–ª—é—á—É", value="~/.ssh/id_rsa", help="–ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É")

                st.info("üîó SSH —Ç—É–Ω–Ω–µ–ª—å: ssh -v -i ~/.ssh/id_rsa skripka@193.246.150.18")

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            st.markdown("#### üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            col1, col2 = st.columns(2)
            with col1:
                host = st.text_input("–•–æ—Å—Ç –ë–î", value="localhost", help="IP –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞ –ë–î")
            with col2:
                port = st.number_input("–ü–æ—Ä—Ç –ë–î", value=5433, min_value=1, max_value=65535, help="–ü–æ—Ä—Ç PostgreSQL")

            database = st.text_input("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", value="postgres", help="–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            user_type = st.selectbox(
                "–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                ["readonly_user (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)", "admin_user (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)",
                                 "postgres (—Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)", "–î—Ä—É–≥–æ–π"],
                index=0,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            )

            if user_type == "readonly_user (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)":
                username = "readonly_user"
                password = "skripka_user"
                st.info("üë§ readonly_user - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è")
            elif user_type == "admin_user (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)":
                username = "admin_user"
                password = "skripka_admin"
                st.info("üë®‚Äçüíº admin_user - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞")
            elif user_type == "postgres (—Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)":
                username = "postgres"
                password = "skripka_super"
                st.info("üîë postgres - –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                username = st.text_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value="", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", help="–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            # –§–æ—Ä–º–∏—Ä—É–µ–º DSN
            if connection_type == "SSH —Ç—É–Ω–Ω–µ–ª—å":
                # –î–ª—è SSH —Ç—É–Ω–Ω–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
                dsn = f"host=localhost port={port} dbname={database} user={username} password={password}"
            else:
                # –î–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ö–æ—Å—Ç
                dsn = f"host={host} port={port} dbname={database} user={username} password={password}"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
        st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL")
        col1, col2 = st.columns(2)
        with col1:
            work_mem = st.number_input("work_mem (MB)", value=4, min_value=1,
                                       max_value=2048, help="–ü–∞–º—è—Ç—å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
        with col2:
            shared_buffers = st.number_input("shared_buffers (MB)", value=128,
                                             min_value=1, max_value=8192, help="–ë—É—Ñ–µ—Ä–Ω—ã–π –∫–µ—à")

        effective_cache_size = st.number_input("effective_cache_size (GB)", value=4,
                                               min_value=1, max_value=64, help="–†–∞–∑–º–µ—Ä –∫–µ—à–∞ –û–°")

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        if not mock_mode and connection_type != "Mock —Ä–µ–∂–∏–º":
            if st.button("üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î", use_container_width=True, type="primary"):
                with st.spinner("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."):
                    try:
                        if connection_type == "SSH —Ç—É–Ω–Ω–µ–ª—å":
                            st.info("üîê –°–æ–∑–¥–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...")

                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
                        success, message = test_db_connection(dsn)
                        if success:
                            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î")
                            st.session_state.db_connected = True
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                            st.session_state.db_connected = False
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                        st.session_state.db_connected = False
            else:
                st.session_state.db_connected = False

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if 'db_connected' in st.session_state:
            if st.session_state.db_connected:
                st.success("üü¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            else:
                st.error("üî¥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        else:
            st.info("‚ö™ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
        st.markdown("### ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI")

        # –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM
        llm_provider = st.selectbox(
            "–ü—Ä–æ–≤–∞–π–¥–µ—Ä AI",
            ["OpenAI", "Anthropic", "–õ–æ–∫–∞–ª—å–Ω—ã–π LLM", "–û—Ç–∫–ª—é—á–∏—Ç—å AI"],
            index=0,
            help="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
        )

        if llm_provider == "OpenAI":
            openai_api_key = st.text_input(
                "OpenAI API Key",
                value="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",
                type="password",
                help="API –∫–ª—é—á OpenAI"
            )

            # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ OpenAI
                openai_model = st.selectbox(
                "–ú–æ–¥–µ–ª—å OpenAI",
                [
                    "gpt-4o-mini",  # –°–∞–º–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å
                    "gpt-4o",       # –ù–æ–≤–∞—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
                    "gpt-4-turbo",  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å GPT-4
                    "gpt-4",        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è GPT-4
                    "gpt-3.5-turbo"  # –≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å
                ],
                    index=0,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å OpenAI (gpt-4o-mini —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏)"
                )

            temperature = st.slider(
                    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    min_value=0.0,
                    max_value=2.0,
                    value=0.7,
                    step=0.1,
                help="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ (0.0 - –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ, 2.0 - –æ—á–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ)"
            )

            enable_ai = True
            anthropic_api_key = ""
            local_llm_url = ""
            local_llm_model = ""

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
            st.session_state['enable_ai'] = enable_ai
            st.session_state['ai_provider'] = llm_provider
                    st.session_state['openai_api_key'] = openai_api_key
                    st.session_state['openai_model'] = openai_model
            st.session_state['openai_temperature'] = temperature

        elif llm_provider == "Anthropic":
                anthropic_api_key = st.text_input(
                "Anthropic API Key",
                value="",
                    type="password",
                help="API –∫–ª—é—á Anthropic"
                )

                anthropic_model = st.selectbox(
                "–ú–æ–¥–µ–ª—å Anthropic",
                [
                    "claude-3-5-sonnet-20241022",  # –°–∞–º–∞—è –Ω–æ–≤–∞—è –∏ –º–æ—â–Ω–∞—è
                    "claude-3-5-sonnet-20240620",  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è
                    "claude-3-opus-20240229",      # –°–∞–º–∞—è –º–æ—â–Ω–∞—è
                    "claude-3-sonnet-20240229",    # –ë–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
                    "claude-3-haiku-20240307"      # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è
                ],
                index=1,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Anthropic"
                )

            temperature = st.slider(
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 
                min_value=0.0,
                max_value=1.0,
                value=0.7,
                step=0.1,
                help="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤"
            )
            
            enable_ai = True
            openai_api_key = ""
            openai_model = "gpt-4o-mini"
            local_llm_url = ""
            local_llm_model = ""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
            st.session_state['enable_ai'] = enable_ai
            st.session_state['ai_provider'] = llm_provider
            st.session_state['anthropic_api_key'] = anthropic_api_key
            st.session_state['anthropic_model'] = anthropic_model
            st.session_state['anthropic_temperature'] = temperature
            
        elif llm_provider == "–õ–æ–∫–∞–ª—å–Ω—ã–π LLM":
            local_llm_url = st.text_input(
                "URL –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM", 
                value="http://localhost:11434",
                help="URL —Å–µ—Ä–≤–µ—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ollama)"
            )
            
            local_llm_model = st.selectbox(
                "–ú–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM",
                [
                    "llama3.1:8b",      # Llama 3.1 8B
                    "llama3.1:70b",     # Llama 3.1 70B
                    "llama3:8b",        # Llama 3 8B
                    "llama3:70b",       # Llama 3 70B
                    "codellama:7b",     # Code Llama 7B
                    "codellama:13b",    # Code Llama 13B
                    "mistral:7b",       # Mistral 7B
                    "qwen:7b",          # Qwen 7B
                    "custom"            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å
                ],
                index=0,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM"
            )
            
            if local_llm_model == "custom":
                local_llm_model = st.text_input("–ò–º—è –º–æ–¥–µ–ª–∏", value="", help="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏")
            
            temperature = st.slider(
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 
                min_value=0.0, 
                max_value=2.0, 
                value=0.7, 
                step=0.1,
                help="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤"
            )
            
            enable_ai = True
            openai_api_key = ""
            openai_model = "gpt-4o-mini"
            anthropic_api_key = ""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
            st.session_state['enable_ai'] = enable_ai
            st.session_state['ai_provider'] = llm_provider
            st.session_state['local_llm_url'] = local_llm_url
            st.session_state['local_llm_model'] = local_llm_model
            st.session_state['local_llm_temperature'] = temperature
            
        else:  # –û—Ç–∫–ª—é—á–∏—Ç—å AI
            enable_ai = False
            openai_api_key = ""
            openai_model = "gpt-4o-mini"
            anthropic_api_key = ""
            local_llm_url = ""
            local_llm_model = ""
            temperature = 0.7
            st.info("üö´ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
            st.session_state['enable_ai'] = enable_ai
            st.session_state['ai_provider'] = llm_provider
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
        if enable_ai:
            st.markdown("#### üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI")
            ai_confidence_threshold = st.slider(
                "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 
                min_value=0.0, 
                max_value=1.0, 
                value=0.7, 
                step=0.1,
                help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            )
        else:
            ai_confidence_threshold = 0.7
        
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not mock_mode and (not dsn or not all([host, database, username])):
        st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    show_connection_status(dsn)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
        "üóÑÔ∏è –û–±–∑–æ—Ä –ë–î", 
        "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î", 
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", 
        "üîç Explain –∞–Ω–∞–ª–∏–∑", 
        "üìà –ú–µ—Ç—Ä–∏–∫–∏",
        "üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "‚ùì –ü–æ–º–æ—â—å"
    ])
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    custom_config = {
        "work_mem": work_mem,
        "shared_buffers": shared_buffers,
        "effective_cache_size": effective_cache_size * 1024,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MB
        "large_table_threshold": 1000000,
        "expensive_query_threshold": 1000.0,
        "slow_query_threshold": 100.0,
        "enable_ai_recommendations": enable_ai,
        "ai_provider": llm_provider.lower(),
        "ai_confidence_threshold": ai_confidence_threshold,
        "openai_api_key": openai_api_key,
        "openai_model": openai_model,
        "openai_temperature": temperature,
        "anthropic_api_key": anthropic_api_key,
        "anthropic_model": anthropic_model if llm_provider == "Anthropic" else "claude-3-5-sonnet-20240620",
        "local_llm_url": local_llm_url,
        "local_llm_model": local_llm_model
    }
    
    with tab1:
        show_db_overview_tab(dsn, mock_mode)
    
    with tab2:
        show_db_config_tab(dsn, mock_mode)
    
    with tab3:
        show_statistics_tab(dsn, mock_mode)
    
    with tab4:
        show_explain_analysis_tab(dsn, mock_mode)
    
    with tab5:
        show_metrics_tab(dsn, mock_mode)
    
    with tab6:
        show_logging_tab(dsn, mock_mode)
    
    with tab7:
        show_help_tab()


if __name__ == "__main__":
    main()
