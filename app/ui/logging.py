"""–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ PostgreSQL."""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)


def show_logging_tab(dsn: str, mock_mode: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —Å –ª–æ–≥–∞–º–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º."""
    st.markdown("## üìã –õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    if mock_mode:
        _show_mock_logging()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–æ–≤
        log_data = _get_log_data(dsn)
        
        if not log_data:
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–æ–≤")
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–≥–æ–≤
        _show_error_logs(log_data.get('error_logs', []))
        _show_slow_queries(log_data.get('slow_queries', []))
        _show_connection_logs(log_data.get('connection_logs', []))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_logging_tab: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")


def _get_log_data(dsn: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    import psycopg2
    
    try:
        with psycopg2.connect(dsn) as conn:
            with conn.cursor() as cur:
                log_data = {}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pg_stat_statements
                cur.execute("""
                    SELECT EXISTS(
                        SELECT 1 FROM pg_extension 
                        WHERE extname = 'pg_stat_statements'
                    )
                """)
                has_pg_stat_statements = cur.fetchone()[0]
                
                if has_pg_stat_statements:
                    # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∑–∞–ø—Ä–æ—Å—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è > 1000ms)
                    cur.execute("""
                        SELECT 
                            query,
                            calls,
                            total_exec_time,
                            mean_exec_time,
                            rows,
                            shared_blks_hit,
                            shared_blks_read
                        FROM pg_stat_statements 
                        WHERE mean_exec_time > 1000
                        ORDER BY total_exec_time DESC 
                        LIMIT 20
                    """)
                    log_data['slow_queries'] = cur.fetchall()
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                cur.execute("""
                    SELECT 
                        pid,
                        usename,
                        application_name,
                        client_addr,
                        state,
                        query_start,
                        state_change,
                        query
                    FROM pg_stat_activity 
                    WHERE state IS NOT NULL
                    ORDER BY query_start DESC
                    LIMIT 50
                """)
                log_data['connection_logs'] = cur.fetchall()
                
                # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
                try:
                    cur.execute("""
                        SELECT 
                            'system' as event_type,
                            now() as event_time,
                            'Database connection established' as message
                        LIMIT 1
                    """)
                    log_data['error_logs'] = cur.fetchall()
                except:
                    log_data['error_logs'] = []
                
                return log_data
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        return {}


def _show_error_logs(error_logs: list):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫."""
    st.markdown("### ‚ùå –õ–æ–≥–∏ –æ—à–∏–±–æ–∫")
    
    if not error_logs:
        st.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    columns = ['event_type', 'event_time', 'message']
    df = pd.DataFrame(error_logs, columns=columns)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    st.dataframe(df, width='stretch', hide_index=True)


def _show_slow_queries(slow_queries: list):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã."""
    st.markdown("### üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    
    if not slow_queries:
        st.info("‚ÑπÔ∏è –ù–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è > 1000ms)")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    columns = [
        'query', 'calls', 'total_exec_time', 'mean_exec_time', 'rows',
        'shared_blks_hit', 'shared_blks_read'
    ]
    
    df = pd.DataFrame(slow_queries, columns=columns)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    df['cache_hit_ratio'] = (df['shared_blks_hit'] / (df['shared_blks_hit'] + df['shared_blks_read'])).round(3)
    df['total_time_minutes'] = (df['total_exec_time'] / 60000).round(2)
    
    # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df['query_short'] = df['query'].str[:100] + '...'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    display_columns = ['query_short', 'calls', 'mean_exec_time', 'total_time_minutes', 'cache_hit_ratio']
    st.dataframe(df[display_columns], width='stretch', hide_index=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if len(df) > 0:
        fig = px.bar(
            df.head(10),
            x='mean_exec_time',
            y='query_short',
            orientation='h',
            title="–¢–æ–ø-10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            labels={'mean_exec_time': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)', 'query_short': '–ó–∞–ø—Ä–æ—Å'}
        )
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)


def _show_connection_logs(connection_logs: list):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
    st.markdown("### üîó –õ–æ–≥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    
    if not connection_logs:
        st.info("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    columns = [
        'pid', 'usename', 'application_name', 'client_addr', 
        'state', 'query_start', 'state_change', 'query'
    ]
    
    df = pd.DataFrame(connection_logs, columns=columns)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è
    if not df.empty and 'query_start' in df.columns:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É timezone - –ø—Ä–∏–≤–æ–¥–∏–º –∫ naive datetime
        current_time = datetime.now()
        query_start_times = pd.to_datetime(df['query_start'], utc=True).dt.tz_localize(None)
        df['duration'] = (current_time - query_start_times).dt.total_seconds().round(1)
    
    # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if 'query' in df.columns:
        df['query_short'] = df['query'].str[:80] + '...'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    display_columns = ['pid', 'usename', 'state', 'duration', 'query_short']
    available_columns = [col for col in display_columns if col in df.columns]
    
    st.dataframe(df[available_columns], width='stretch', hide_index=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    if 'state' in df.columns:
        state_counts = df['state'].value_counts()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º")
            st.dataframe(state_counts.reset_index(), width='stretch', hide_index=True)
        
        with col2:
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            fig = px.pie(
                values=state_counts.values,
                names=state_counts.index,
                title="–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
            )
            st.plotly_chart(fig, use_container_width=True)


def _show_mock_logging():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∫–æ–≤—ã–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    st.markdown("### üé≠ –î–µ–º–æ-—Ä–µ–∂–∏–º: –õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    st.markdown("#### üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    
    mock_slow_queries = pd.DataFrame({
        'query': [
            'SELECT * FROM large_table WHERE complex_condition = $1',
            'UPDATE huge_table SET column = $1 WHERE id > $2',
            'SELECT COUNT(*) FROM joined_tables WHERE date_range > $1',
            'DELETE FROM old_data WHERE created_at < $1',
            'INSERT INTO logs SELECT * FROM temp_table'
        ],
        'calls': [25, 15, 8, 5, 3],
        'mean_exec_time': [2500, 1800, 1500, 1200, 1000],
        'total_time_minutes': [1.04, 0.45, 0.20, 0.10, 0.05],
        'cache_hit_ratio': [0.85, 0.78, 0.92, 0.88, 0.95]
    })
    
    st.dataframe(mock_slow_queries, width='stretch', hide_index=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    fig = px.bar(
        mock_slow_queries,
        x='mean_exec_time',
        y='query',
        orientation='h',
        title="–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è > 1000ms)",
        labels={'mean_exec_time': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)', 'query': '–ó–∞–ø—Ä–æ—Å'}
    )
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)
    
    # –õ–æ–≥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    st.markdown("#### üîó –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    mock_connections = pd.DataFrame({
        'pid': [12345, 12346, 12347, 12348, 12349],
        'usename': ['app_user', 'admin', 'app_user', 'readonly_user', 'app_user'],
        'state': ['active', 'idle', 'active', 'idle in transaction', 'active'],
        'duration': [120.5, 300.2, 45.8, 180.1, 90.3],
        'query': [
            'SELECT * FROM users WHERE id = $1',
            'SELECT COUNT(*) FROM orders',
            'UPDATE products SET price = $1',
            'BEGIN; SELECT * FROM logs',
            'INSERT INTO sessions VALUES ($1, $2)'
        ]
    })
    
    st.dataframe(mock_connections, width='stretch', hide_index=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º")
        state_counts = mock_connections['state'].value_counts()
        st.dataframe(state_counts.reset_index(), width='stretch', hide_index=True)
    
    with col2:
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        fig = px.pie(
            values=state_counts.values,
            names=state_counts.index,
            title="–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # –õ–æ–≥–∏ –æ—à–∏–±–æ–∫
    st.markdown("#### ‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    
    mock_events = pd.DataFrame({
        'event_type': ['connection', 'query', 'error', 'connection', 'query'],
        'event_time': [
            datetime.now() - timedelta(minutes=5),
            datetime.now() - timedelta(minutes=3),
            datetime.now() - timedelta(minutes=2),
            datetime.now() - timedelta(minutes=1),
            datetime.now() - timedelta(seconds=30)
        ],
        'message': [
            'New connection established from 192.168.1.100',
            'Slow query detected: SELECT * FROM large_table',
            'Connection timeout for user app_user',
            'Connection closed for user admin',
            'Query completed successfully'
        ]
    })
    
    st.dataframe(mock_events, width='stretch', hide_index=True)
