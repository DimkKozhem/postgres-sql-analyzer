"""–ú–æ–¥—É–ª—å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ '–û–±–∑–æ—Ä –ë–î'."""

import streamlit as st
import pandas as pd
import plotly.express as px
from typing import Dict, Any
import logging
import psycopg2
from psycopg2.extras import RealDictCursor

logger = logging.getLogger(__name__)


def show_db_overview_tab(dsn: str, mock_mode: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É '–û–±–∑–æ—Ä –ë–î'."""
    st.markdown("## üóÑÔ∏è –û–±–∑–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    if mock_mode:
        st.info("üé≠ Mock —Ä–µ–∂–∏–º: –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        _show_mock_db_overview()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_info = _get_database_info(dsn)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–∫—É
        _show_database_summary(db_info)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
        _show_database_structure(db_info)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ER-–¥–∏–∞–≥—Ä–∞–º–º—É
        _show_er_diagram(db_info)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        _show_connection_info(db_info)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_db_overview_tab: {e}")


def _get_database_info(dsn: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    db_info = {
        'version': None,
        'tables': [],
        'indexes': [],
        'relationships': [],
        'table_count': 0,
        'index_count': 0,
        'total_size': 0,
        'connection_info': {}
    }
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(dsn, cursor_factory=RealDictCursor)
        
        with conn.cursor() as cur:
            # –í–µ—Ä—Å–∏—è PostgreSQL
            cur.execute("SELECT version();")
            result = cur.fetchone()
            db_info['version'] = result['version'] if result else None
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            cur.execute("""
                SELECT 
                    current_database() as database,
                    current_user as user,
                    inet_server_addr() as host,
                    inet_server_port() as port
            """)
            result = cur.fetchone()
            db_info['connection_info'] = dict(result) if result else {}
            
            # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            cur.execute("""
                SELECT 
                    schemaname,
                    tablename,
                    tableowner,
                    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size,
                    pg_total_relation_size(schemaname||'.'||tablename) as size_bytes
                FROM pg_tables 
                WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
                ORDER BY size_bytes DESC
            """)
            tables = cur.fetchall()
            db_info['tables'] = [dict(table) for table in tables]
            db_info['table_count'] = len(db_info['tables'])
            
            # –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
            cur.execute("""
                SELECT 
                    schemaname,
                    indexname,
                    tablename,
                    indexdef,
                    pg_size_pretty(pg_relation_size(schemaname||'.'||indexname)) as size
                FROM pg_indexes 
                WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
                ORDER BY pg_relation_size(schemaname||'.'||indexname) DESC
            """)
            indexes = cur.fetchall()
            db_info['indexes'] = [dict(index) for index in indexes]
            db_info['index_count'] = len(db_info['indexes'])
            
            # –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
            cur.execute("""
                SELECT 
                    tc.table_schema,
                    tc.table_name,
                    kcu.column_name,
                    ccu.table_schema AS foreign_table_schema,
                    ccu.table_name AS foreign_table_name,
                    ccu.column_name AS foreign_column_name
                FROM information_schema.table_constraints AS tc
                JOIN information_schema.key_column_usage AS kcu
                    ON tc.constraint_name = kcu.constraint_name
                    AND tc.table_schema = kcu.table_schema
                JOIN information_schema.constraint_column_usage AS ccu
                    ON ccu.constraint_name = tc.constraint_name
                    AND ccu.table_schema = tc.table_schema
                WHERE tc.constraint_type = 'FOREIGN KEY'
                ORDER BY tc.table_name
            """)
            relationships = cur.fetchall()
            db_info['relationships'] = [dict(rel) for rel in relationships]
            
            # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cur.execute("SELECT pg_size_pretty(pg_database_size(current_database())) as total_size")
            result = cur.fetchone()
            db_info['total_size'] = result['total_size'] if result else 'N/A'
            
        conn.close()
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")
        raise
    
    return db_info


def _show_database_summary(db_info: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    st.markdown("### üìä –°–≤–æ–¥–∫–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìã –¢–∞–±–ª–∏—Ü—ã",
            value=db_info['table_count']
        )
    
    with col2:
        st.metric(
            label="üîç –ò–Ω–¥–µ–∫—Å—ã",
            value=db_info['index_count']
        )
    
    with col3:
        st.metric(
            label="üîó –°–≤—è–∑–∏",
            value=len(db_info['relationships'])
        )
    
    with col4:
        st.metric(
            label="üíæ –†–∞–∑–º–µ—Ä –ë–î",
            value=db_info['total_size']
        )


def _show_database_structure(db_info: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    st.markdown("### üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–∞–±–ª–∏—Ü—ã
    if db_info['tables']:
        st.markdown("#### üìã –¢–∞–±–ª–∏—Ü—ã")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ç–∞–±–ª–∏—Ü
        tables_df = pd.DataFrame(db_info['tables'])
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        st.dataframe(
            tables_df,
            width='stretch',
            hide_index=True
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü
        if len(tables_df) > 0 and 'size_bytes' in tables_df.columns:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            valid_tables = tables_df[tables_df['size_bytes'].notna()]
            if len(valid_tables) > 0:
                fig = px.bar(
                    valid_tables.head(10),
                    x='tablename',
                    y='size_bytes',
                    title="–¢–æ–ø-10 —Ç–∞–±–ª–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä—É",
                    labels={'size_bytes': '–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)', 'tablename': '–¢–∞–±–ª–∏—Ü–∞'}
                )
                fig.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig, width='stretch')
    else:
        st.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    if db_info['indexes']:
        st.markdown("#### üîç –ò–Ω–¥–µ–∫—Å—ã")
        
        indexes_df = pd.DataFrame(db_info['indexes'])
        st.dataframe(
            indexes_df,
            width='stretch',
            hide_index=True
        )
    else:
        st.info("‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def _show_er_diagram(db_info: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç ER-–¥–∏–∞–≥—Ä–∞–º–º—É."""
    st.markdown("### üîó ER-–¥–∏–∞–≥—Ä–∞–º–º–∞")
    
    if not db_info['relationships']:
        st.info("‚ÑπÔ∏è –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é ER-–¥–∏–∞–≥—Ä–∞–º–º—É
    relationships_df = pd.DataFrame(db_info['relationships'])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
    table_connections = {}
    for _, rel in relationships_df.iterrows():
        table = f"{rel['table_schema']}.{rel['table_name']}"
        foreign_table = f"{rel['foreign_table_schema']}.{rel['foreign_table_name']}"
        
        if table not in table_connections:
            table_connections[table] = []
        table_connections[table].append(foreign_table)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤—è–∑–∏
    st.markdown("#### –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:")
    for table, connections in table_connections.items():
        st.write(f"**{table}** ‚Üí {', '.join(connections)}")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    if len(relationships_df) > 0:
        st.markdown("#### –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–≤—è–∑–µ–π:")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π
        import plotly.graph_objects as go
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        all_tables = set()
        for _, rel in relationships_df.iterrows():
            all_tables.add(f"{rel['table_schema']}.{rel['table_name']}")
            all_tables.add(f"{rel['foreign_table_schema']}.{rel['foreign_table_name']}")
        
        all_tables = list(all_tables)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–∑–ª–æ–≤
        import numpy as np
        n_tables = len(all_tables)
        angles = np.linspace(0, 2*np.pi, n_tables, endpoint=False)
        x_pos = np.cos(angles)
        y_pos = np.sin(angles)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã (—Ç–∞–±–ª–∏—Ü—ã)
        fig.add_trace(go.Scatter(
            x=x_pos,
            y=y_pos,
            mode='markers+text',
            marker=dict(size=20, color='lightblue'),
            text=all_tables,
            textposition="middle center",
            name="–¢–∞–±–ª–∏—Ü—ã"
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
        for _, rel in relationships_df.iterrows():
            table1 = f"{rel['table_schema']}.{rel['table_name']}"
            table2 = f"{rel['foreign_table_schema']}.{rel['foreign_table_name']}"
            
            idx1 = all_tables.index(table1)
            idx2 = all_tables.index(table2)
            
            fig.add_trace(go.Scatter(
                x=[x_pos[idx1], x_pos[idx2]],
                y=[y_pos[idx1], y_pos[idx2]],
                mode='lines',
                line=dict(color='gray', width=2),
                showlegend=False
            ))
        
        fig.update_layout(
            title="ER-–¥–∏–∞–≥—Ä–∞–º–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
            showlegend=True,
            height=500
        )
        
        st.plotly_chart(fig, width='stretch')


def _show_connection_info(db_info: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏."""
    st.markdown("### üîå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üêò –í–µ—Ä—Å–∏—è PostgreSQL")
        if db_info['version']:
            st.code(db_info['version'])
        else:
            st.info("–í–µ—Ä—Å–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
    
    with col2:
        st.markdown("#### üì° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        if db_info['connection_info']:
            conn_info = db_info['connection_info']
            st.write(f"**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** {conn_info.get('database', 'N/A')}")
            st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {conn_info.get('user', 'N/A')}")
            st.write(f"**–•–æ—Å—Ç:** {conn_info.get('host', 'N/A')}")
            st.write(f"**–ü–æ—Ä—Ç:** {conn_info.get('port', 'N/A')}")
        else:
            st.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


def _show_mock_db_overview():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–∑–æ—Ä–∞ –ë–î."""
    st.markdown("### üìä –°–≤–æ–¥–∫–∞ (Mock –¥–∞–Ω–Ω—ã–µ)")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(label="üìã –¢–∞–±–ª–∏—Ü—ã", value=15)
    
    with col2:
        st.metric(label="üîç –ò–Ω–¥–µ–∫—Å—ã", value=23)
    
    with col3:
        st.metric(label="üîó –°–≤—è–∑–∏", value=8)
    
    with col4:
        st.metric(label="üíæ –†–∞–∑–º–µ—Ä –ë–î", value="2.5 GB")
    
    st.markdown("### üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Mock)")
    
    # Mock —Ç–∞–±–ª–∏—Ü—ã
    mock_tables = pd.DataFrame({
        'schemaname': ['public', 'public', 'public', 'public', 'public'],
        'tablename': ['users', 'orders', 'products', 'categories', 'payments'],
        'tableowner': ['postgres', 'postgres', 'postgres', 'postgres', 'postgres'],
        'size': ['1.2 GB', '800 MB', '400 MB', '100 MB', '50 MB'],
        'size_bytes': [1200000000, 800000000, 400000000, 100000000, 50000000]
    })
    
    st.dataframe(mock_tables, width='stretch', hide_index=True)
    
    # Mock –≥—Ä–∞—Ñ–∏–∫
    fig = px.bar(
        mock_tables,
        x='tablename',
        y='size_bytes',
        title="–¢–æ–ø-5 —Ç–∞–±–ª–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä—É (Mock)",
        labels={'size_bytes': '–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)', 'tablename': '–¢–∞–±–ª–∏—Ü–∞'}
    )
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, width='stretch')
    
    st.markdown("### üîó ER-–¥–∏–∞–≥—Ä–∞–º–º–∞ (Mock)")
    
    # Mock —Å–≤—è–∑–∏
    mock_relationships = pd.DataFrame({
        'table_schema': ['public', 'public', 'public', 'public'],
        'table_name': ['orders', 'orders', 'products', 'payments'],
        'column_name': ['user_id', 'product_id', 'category_id', 'order_id'],
        'foreign_table_schema': ['public', 'public', 'public', 'public'],
        'foreign_table_name': ['users', 'products', 'categories', 'orders'],
        'foreign_column_name': ['id', 'id', 'id', 'id']
    })
    
    st.markdown("#### –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:")
    st.write("**public.users** ‚Üí public.orders")
    st.write("**public.products** ‚Üí public.orders")
    st.write("**public.categories** ‚Üí public.products")
    st.write("**public.orders** ‚Üí public.payments")
    
    # Mock –≤–∏–∑—É–∞–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    import plotly.graph_objects as go
    import numpy as np
    
    tables = ['users', 'orders', 'products', 'categories', 'payments']
    n_tables = len(tables)
    angles = np.linspace(0, 2*np.pi, n_tables, endpoint=False)
    x_pos = np.cos(angles)
    y_pos = np.sin(angles)
    
    fig = go.Figure()
    
    # –£–∑–ª—ã
    fig.add_trace(go.Scatter(
        x=x_pos,
        y=y_pos,
        mode='markers+text',
        marker=dict(size=20, color='lightblue'),
        text=tables,
        textposition="middle center",
        name="–¢–∞–±–ª–∏—Ü—ã"
    ))
    
    # –°–≤—è–∑–∏
    connections = [
        (0, 1),  # users -> orders
        (2, 1),  # products -> orders
        (3, 2),  # categories -> products
        (1, 4)   # orders -> payments
    ]
    
    for start, end in connections:
        fig.add_trace(go.Scatter(
            x=[x_pos[start], x_pos[end]],
            y=[y_pos[start], y_pos[end]],
            mode='lines',
            line=dict(color='gray', width=2),
            showlegend=False
        ))
    
    fig.update_layout(
        title="ER-–¥–∏–∞–≥—Ä–∞–º–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Mock)",
        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        showlegend=True,
        height=500
    )
    
    st.plotly_chart(fig, width='stretch')
    
    st.markdown("### üîå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (Mock)")
    st.code("PostgreSQL 15.4 on x86_64-pc-linux-gnu, compiled by gcc")
