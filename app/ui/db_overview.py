"""–ú–æ–¥—É–ª—å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ '–û–±–∑–æ—Ä –ë–î'."""

import streamlit as st
import pandas as pd
import plotly.express as px
from typing import Dict, Any
import logging
import psycopg2
from psycopg2.extras import RealDictCursor

logger = logging.getLogger(__name__)


def show_db_overview_tab(dsn: str, mock_mode: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É '–û–±–∑–æ—Ä –ë–î'."""
    st.markdown("## üóÑÔ∏è –û–±–∑–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    if mock_mode:
        st.info("üé≠ Mock —Ä–µ–∂–∏–º: –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        _show_mock_db_overview()
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_info = _get_database_info(dsn)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–∫—É
        _show_database_summary(db_info)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
        _show_database_structure(db_info)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ER-–¥–∏–∞–≥—Ä–∞–º–º—É
        _show_er_diagram(db_info, dsn)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        _show_connection_info(db_info)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_db_overview_tab: {e}")


def _get_database_info(dsn: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    db_info = {
        'version': None,
        'tables': [],
        'indexes': [],
        'relationships': [],
        'table_count': 0,
        'index_count': 0,
        'total_size': 0,
        'connection_info': {}
    }

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(dsn, cursor_factory=RealDictCursor)

        with conn.cursor() as cur:
            # –í–µ—Ä—Å–∏—è PostgreSQL
            cur.execute("SELECT version();")
            result = cur.fetchone()
            db_info['version'] = result['version'] if result else None

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            cur.execute("""
                SELECT 
                    current_database() as database,
                    current_user as user,
                    inet_server_addr() as host,
                    inet_server_port() as port
            """)
            result = cur.fetchone()
            db_info['connection_info'] = dict(result) if result else {}

            # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            cur.execute("""
                SELECT 
                    schemaname,
                    tablename,
                    tableowner,
                    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size,
                    pg_total_relation_size(schemaname||'.'||tablename) as size_bytes
                FROM pg_tables 
                WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
                ORDER BY size_bytes DESC
            """)
            tables = cur.fetchall()
            db_info['tables'] = [dict(table) for table in tables]
            db_info['table_count'] = len(db_info['tables'])

            # –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
            cur.execute("""
                SELECT 
                    schemaname,
                    indexname,
                    tablename,
                    indexdef,
                    pg_size_pretty(pg_relation_size(schemaname||'.'||indexname)) as size
                FROM pg_indexes 
                WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
                ORDER BY pg_relation_size(schemaname||'.'||indexname) DESC
            """)
            indexes = cur.fetchall()
            db_info['indexes'] = [dict(index) for index in indexes]
            db_info['index_count'] = len(db_info['indexes'])

            # –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ (Foreign Keys)
            cur.execute("""
                SELECT 
                    tc.table_schema,
                    tc.table_name,
                    kcu.column_name,
                    ccu.table_schema AS foreign_table_schema,
                    ccu.table_name AS foreign_table_name,
                    ccu.column_name AS foreign_column_name,
                    'FOREIGN KEY' as relationship_type
                FROM information_schema.table_constraints AS tc
                JOIN information_schema.key_column_usage AS kcu
                    ON tc.constraint_name = kcu.constraint_name
                    AND tc.table_schema = kcu.table_schema
                JOIN information_schema.constraint_column_usage AS ccu
                    ON ccu.constraint_name = tc.constraint_name
                    AND ccu.table_schema = tc.table_schema
                WHERE tc.constraint_type = 'FOREIGN KEY'
                ORDER BY tc.table_name
            """)
            fk_relationships = cur.fetchall()

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å–≤—è–∑–µ–π –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫ (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥)
            cur.execute("""
                SELECT DISTINCT
                    t1.table_schema,
                    t1.table_name,
                    t1.column_name,
                    t2.table_schema AS foreign_table_schema,
                    t2.table_name AS foreign_table_name,
                    t2.column_name AS foreign_column_name,
                    'NAME_PATTERN' as relationship_type
                FROM information_schema.columns t1
                JOIN information_schema.columns t2 
                    ON t1.column_name = t2.column_name
                    AND t1.table_schema = t2.table_schema
                    AND t1.table_name != t2.table_name
                WHERE t1.table_schema NOT IN ('information_schema', 'pg_catalog')
                    AND t2.table_schema NOT IN ('information_schema', 'pg_catalog')
                    AND (
                        t1.column_name LIKE '%_id' 
                        OR t1.column_name LIKE '%id'
                        OR t1.column_name IN ('id', 'parent_id', 'user_id', 'order_id', 'product_id')
                    )
                    AND t2.column_name = t1.column_name
                ORDER BY t1.table_name
            """)
            pattern_relationships = cur.fetchall()

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏
            all_relationships = list(fk_relationships) + list(pattern_relationships)
            db_info['relationships'] = [dict(rel) for rel in all_relationships]

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Å–≤—è–∑–µ–π
            db_info['fk_count'] = len(fk_relationships)
            db_info['pattern_count'] = len(pattern_relationships)

            # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cur.execute("SELECT pg_size_pretty(pg_database_size(current_database())) as total_size")
            result = cur.fetchone()
            db_info['total_size'] = result['total_size'] if result else 'N/A'

        conn.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")
        raise

    return db_info


def _show_database_summary(db_info: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    st.markdown("### üìä –°–≤–æ–¥–∫–∞")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            label="üìã –¢–∞–±–ª–∏—Ü—ã",
            value=db_info['table_count']
        )

    with col2:
        st.metric(
            label="üîç –ò–Ω–¥–µ–∫—Å—ã",
            value=db_info['index_count']
        )

    with col3:
        st.metric(
            label="üîó –°–≤—è–∑–∏",
            value=len(db_info['relationships'])
        )

    with col4:
        st.metric(
            label="üíæ –†–∞–∑–º–µ—Ä –ë–î",
            value=db_info['total_size']
        )


def _show_database_structure(db_info: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    st.markdown("### üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    # –¢–∞–±–ª–∏—Ü—ã
    if db_info['tables']:
        st.markdown("#### üìã –¢–∞–±–ª–∏—Ü—ã")

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ç–∞–±–ª–∏—Ü
        tables_df = pd.DataFrame(db_info['tables'])

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        st.dataframe(
            tables_df,
            width='stretch',
            hide_index=True
        )

        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü
        if len(tables_df) > 0 and 'size_bytes' in tables_df.columns:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            valid_tables = tables_df[tables_df['size_bytes'].notna()]
            if len(valid_tables) > 0:
                fig = px.bar(
                    valid_tables.head(10),
                    x='tablename',
                    y='size_bytes',
                    title="–¢–æ–ø-10 —Ç–∞–±–ª–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä—É",
                    labels={'size_bytes': '–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)', 'tablename': '–¢–∞–±–ª–∏—Ü–∞'}
                )
                fig.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig, width='stretch')
    else:
        st.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # –ò–Ω–¥–µ–∫—Å—ã
    if db_info['indexes']:
        st.markdown("#### üîç –ò–Ω–¥–µ–∫—Å—ã")

        indexes_df = pd.DataFrame(db_info['indexes'])
        st.dataframe(
            indexes_df,
            width='stretch',
            hide_index=True
        )
    else:
        st.info("‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def _show_er_diagram(db_info: Dict[str, Any], dsn: str = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç ER-–¥–∏–∞–≥—Ä–∞–º–º—É."""
    st.markdown("### üîó ER-–¥–∏–∞–≥—Ä–∞–º–º–∞")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–≤—è–∑—è–º
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üîë Foreign Keys", db_info.get('fk_count', 0))
    with col2:
        st.metric("üîç –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º", db_info.get('pattern_count', 0))
    with col3:
        st.metric("üìä –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π", len(db_info['relationships']))

    if not db_info['relationships']:
        st.warning("‚ö†Ô∏è –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        st.markdown("#### üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")

        if db_info.get('table_count', 0) == 0:
            st.error("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü")
        else:
            st.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {db_info['table_count']} —Ç–∞–±–ª–∏—Ü")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if db_info['tables']:
                st.markdown("**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:**")
                tables_list = [f"{t['schemaname']}.{t['tablename']}" for t in db_info['tables'][:10]]
                st.write(", ".join(tables_list))
                if len(db_info['tables']) > 10:
                    st.write(f"... –∏ –µ—â–µ {len(db_info['tables']) - 10} —Ç–∞–±–ª–∏—Ü")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if db_info['tables'] and dsn:
            st.markdown("#### üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü:")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            try:
                conn = psycopg2.connect(dsn, cursor_factory=RealDictCursor)
                with conn.cursor() as cur:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
                    cur.execute("""
                        SELECT 
                            table_schema,
                            table_name,
                            column_name,
                            data_type
                        FROM information_schema.columns 
                        WHERE table_schema NOT IN ('information_schema', 'pg_catalog')
                            AND (
                                column_name LIKE '%_id' 
                                OR column_name LIKE '%id'
                                OR column_name IN ('id', 'parent_id', 'user_id', 'order_id', 'product_id', 'category_id')
                            )
                        ORDER BY table_name, column_name
                    """)
                    id_columns = cur.fetchall()

                    if id_columns:
                        st.markdown("**–ù–∞–π–¥–µ–Ω–Ω—ã–µ ID-–∫–æ–ª–æ–Ω–∫–∏:**")
                        for col in id_columns[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                            st.write(
                                f"‚Ä¢ `{col['table_schema']}.{col['table_name']}.{col['column_name']}` ({col['data_type']})")
                        if len(id_columns) > 20:
                            st.write(f"... –∏ –µ—â–µ {len(id_columns) - 20} –∫–æ–ª–æ–Ω–æ–∫")
                    else:
                        st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ —Å ID-–ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ primary keys
                    cur.execute("""
                        SELECT 
                            tc.table_schema,
                            tc.table_name,
                            kcu.column_name
                        FROM information_schema.table_constraints tc
                        JOIN information_schema.key_column_usage kcu
                            ON tc.constraint_name = kcu.constraint_name
                        WHERE tc.constraint_type = 'PRIMARY KEY'
                            AND tc.table_schema NOT IN ('information_schema', 'pg_catalog')
                        ORDER BY tc.table_name
                    """)
                    pk_columns = cur.fetchall()

                    if pk_columns:
                        st.markdown("**Primary Keys:**")
                        for pk in pk_columns[:10]:
                            st.write(f"‚Ä¢ `{pk['table_schema']}.{pk['table_name']}.{pk['column_name']}`")
                        if len(pk_columns) > 10:
                            st.write(f"... –∏ –µ—â–µ {len(pk_columns) - 10} primary keys")
                    else:
                        st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ primary key constraints")

                conn.close()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

        st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        st.markdown("""
        - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å foreign key constraints
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ —Ç–∏–ø–∞ `*_id`, `id`, `user_id` –∏ —Ç.–¥.
        - –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞:
          ```sql
          ALTER TABLE orders ADD CONSTRAINT fk_user 
          FOREIGN KEY (user_id) REFERENCES users(id);
          ```
        - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É —Ç–∞–±–ª–∏—Ü –µ—Å—Ç—å primary key constraints
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ information_schema
        """)
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é ER-–¥–∏–∞–≥—Ä–∞–º–º—É
    relationships_df = pd.DataFrame(db_info['relationships'])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑—è—Ö
    st.markdown("#### üìã –î–µ—Ç–∞–ª–∏ —Å–≤—è–∑–µ–π:")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Å–≤—è–∑–µ–π
    fk_rels = relationships_df[relationships_df['relationship_type'] == 'FOREIGN KEY']
    pattern_rels = relationships_df[relationships_df['relationship_type'] == 'NAME_PATTERN']

    if len(fk_rels) > 0:
        st.markdown("**üîë Foreign Key Constraints:**")
        for _, rel in fk_rels.iterrows():
            st.write(
                f"‚Ä¢ `{rel['table_schema']}.{rel['table_name']}.{rel['column_name']}` ‚Üí `{rel['foreign_table_schema']}.{rel['foreign_table_name']}.{rel['foreign_column_name']}`")

    if len(pattern_rels) > 0:
        st.markdown("**üîç –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Å–≤—è–∑–∏ (–ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫):**")
        for _, rel in pattern_rels.iterrows():
            st.write(
                f"‚Ä¢ `{rel['table_schema']}.{rel['table_name']}.{rel['column_name']}` ‚Üí `{rel['foreign_table_schema']}.{rel['foreign_table_name']}.{rel['foreign_column_name']}`")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º –¥–ª—è —Å–≤–æ–¥–∫–∏
    table_connections = {}
    for _, rel in relationships_df.iterrows():
        table = f"{rel['table_schema']}.{rel['table_name']}"
        foreign_table = f"{rel['foreign_table_schema']}.{rel['foreign_table_name']}"
        rel_type = rel.get('relationship_type', 'UNKNOWN')

        if table not in table_connections:
            table_connections[table] = []
        table_connections[table].append(f"{foreign_table} ({rel_type})")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–∫—É —Å–≤—è–∑–µ–π
    st.markdown("#### üîó –°–≤–æ–¥–∫–∞ —Å–≤—è–∑–µ–π:")
    for table, connections in table_connections.items():
        st.write(f"**{table}** ‚Üí {', '.join(connections)}")

    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    if len(relationships_df) > 0:
        st.markdown("#### üìä –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–≤—è–∑–µ–π:")

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π
        import plotly.graph_objects as go

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        all_tables = set()
        for _, rel in relationships_df.iterrows():
            all_tables.add(f"{rel['table_schema']}.{rel['table_name']}")
            all_tables.add(f"{rel['foreign_table_schema']}.{rel['foreign_table_name']}")

        all_tables = list(all_tables)

        if len(all_tables) > 1:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–∑–ª–æ–≤
            import numpy as np
            n_tables = len(all_tables)
            angles = np.linspace(0, 2 * np.pi, n_tables, endpoint=False)
            x_pos = np.cos(angles)
            y_pos = np.sin(angles)

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
            fig = go.Figure()

            # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã (—Ç–∞–±–ª–∏—Ü—ã)
            fig.add_trace(go.Scatter(
                x=x_pos,
                y=y_pos,
                mode='markers+text',
                marker=dict(size=20, color='lightblue'),
                text=all_tables,
                textposition="middle center",
                name="–¢–∞–±–ª–∏—Ü—ã"
            ))

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            for _, rel in relationships_df.iterrows():
                table1 = f"{rel['table_schema']}.{rel['table_name']}"
                table2 = f"{rel['foreign_table_schema']}.{rel['foreign_table_name']}"

                if table1 in all_tables and table2 in all_tables:
                    idx1 = all_tables.index(table1)
                    idx2 = all_tables.index(table2)

                    # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π
                    color = 'green' if rel.get('relationship_type') == 'FOREIGN KEY' else 'orange'
                    width = 3 if rel.get('relationship_type') == 'FOREIGN KEY' else 2

                    fig.add_trace(go.Scatter(
                        x=[x_pos[idx1], x_pos[idx2]],
                        y=[y_pos[idx1], y_pos[idx2]],
                        mode='lines',
                        line=dict(color=color, width=width),
                        showlegend=False
                    ))

            fig.update_layout(
                title="ER-–¥–∏–∞–≥—Ä–∞–º–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                showlegend=True,
                height=500
            )

            st.plotly_chart(fig, width='stretch')

            # –õ–µ–≥–µ–Ω–¥–∞
            st.markdown("**–õ–µ–≥–µ–Ω–¥–∞:** üü¢ –ó–µ–ª–µ–Ω—ã–µ –ª–∏–Ω–∏–∏ = Foreign Key Constraints, üü† –û—Ä–∞–Ω–∂–µ–≤—ã–µ –ª–∏–Ω–∏–∏ = –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Å–≤—è–∑–∏")
        else:
            st.info("‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã")


def _show_connection_info(db_info: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏."""
    st.markdown("### üîå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### üêò –í–µ—Ä—Å–∏—è PostgreSQL")
        if db_info['version']:
            st.code(db_info['version'])
        else:
            st.info("–í–µ—Ä—Å–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")

    with col2:
        st.markdown("#### üì° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        if db_info['connection_info']:
            conn_info = db_info['connection_info']
            st.write(f"**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** {conn_info.get('database', 'N/A')}")
            st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {conn_info.get('user', 'N/A')}")
            st.write(f"**–•–æ—Å—Ç:** {conn_info.get('host', 'N/A')}")
            st.write(f"**–ü–æ—Ä—Ç:** {conn_info.get('port', 'N/A')}")
        else:
            st.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


def _show_mock_db_overview():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–∑–æ—Ä–∞ –ë–î."""
    st.markdown("### üìä –°–≤–æ–¥–∫–∞ (Mock –¥–∞–Ω–Ω—ã–µ)")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(label="üìã –¢–∞–±–ª–∏—Ü—ã", value=15)

    with col2:
        st.metric(label="üîç –ò–Ω–¥–µ–∫—Å—ã", value=23)

    with col3:
        st.metric(label="üîó –°–≤—è–∑–∏", value=8)

    with col4:
        st.metric(label="üíæ –†–∞–∑–º–µ—Ä –ë–î", value="2.5 GB")

    st.markdown("### üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Mock)")

    # Mock —Ç–∞–±–ª–∏—Ü—ã
    mock_tables = pd.DataFrame({
        'schemaname': ['public', 'public', 'public', 'public', 'public'],
        'tablename': ['users', 'orders', 'products', 'categories', 'payments'],
        'tableowner': ['postgres', 'postgres', 'postgres', 'postgres', 'postgres'],
        'size': ['1.2 GB', '800 MB', '400 MB', '100 MB', '50 MB'],
        'size_bytes': [1200000000, 800000000, 400000000, 100000000, 50000000]
    })

    st.dataframe(mock_tables, width='stretch', hide_index=True)

    # Mock –≥—Ä–∞—Ñ–∏–∫
    fig = px.bar(
        mock_tables,
        x='tablename',
        y='size_bytes',
        title="–¢–æ–ø-5 —Ç–∞–±–ª–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä—É (Mock)",
        labels={'size_bytes': '–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)', 'tablename': '–¢–∞–±–ª–∏—Ü–∞'}
    )
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, width='stretch')

    st.markdown("### üîó ER-–¥–∏–∞–≥—Ä–∞–º–º–∞ (Mock)")

    # Mock —Å–≤—è–∑–∏
    _ = pd.DataFrame({
        'table_schema': ['public', 'public', 'public', 'public'],
        'table_name': ['orders', 'orders', 'products', 'payments'],
        'column_name': ['user_id', 'product_id', 'category_id', 'order_id'],
        'foreign_table_schema': ['public', 'public', 'public', 'public'],
        'foreign_table_name': ['users', 'products', 'categories', 'orders'],
        'foreign_column_name': ['id', 'id', 'id', 'id']
    })

    st.markdown("#### –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:")
    st.write("**public.users** ‚Üí public.orders")
    st.write("**public.products** ‚Üí public.orders")
    st.write("**public.categories** ‚Üí public.products")
    st.write("**public.orders** ‚Üí public.payments")

    # Mock –≤–∏–∑—É–∞–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    import plotly.graph_objects as go
    import numpy as np

    tables = ['users', 'orders', 'products', 'categories', 'payments']
    n_tables = len(tables)
    angles = np.linspace(0, 2 * np.pi, n_tables, endpoint=False)
    x_pos = np.cos(angles)
    y_pos = np.sin(angles)

    fig = go.Figure()

    # –£–∑–ª—ã
    fig.add_trace(go.Scatter(
        x=x_pos,
        y=y_pos,
        mode='markers+text',
        marker=dict(size=20, color='lightblue'),
        text=tables,
        textposition="middle center",
        name="–¢–∞–±–ª–∏—Ü—ã"
    ))

    # –°–≤—è–∑–∏
    connections = [
        (0, 1),  # users -> orders
        (2, 1),  # products -> orders
        (3, 2),  # categories -> products
        (1, 4)   # orders -> payments
    ]

    for start, end in connections:
        fig.add_trace(go.Scatter(
            x=[x_pos[start], x_pos[end]],
            y=[y_pos[start], y_pos[end]],
            mode='lines',
            line=dict(color='gray', width=2),
            showlegend=False
        ))

    fig.update_layout(
        title="ER-–¥–∏–∞–≥—Ä–∞–º–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Mock)",
        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        showlegend=True,
        height=500
    )

    st.plotly_chart(fig, width='stretch')

    st.markdown("### üîå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (Mock)")
    st.code("PostgreSQL 15.4 on x86_64-pc-linux-gnu, compiled by gcc")
