"""–ú–æ–¥—É–ª—å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ 'Explain –∞–Ω–∞–ª–∏–∑' —Å LLM."""

from py_pg_explain_analyzer.llm_summarizer import run_llm
from py_pg_explain_analyzer.sql_metadata_extractor import TableInfoExtractor
from py_pg_explain_analyzer.sql_parser import SqlAnalyzer
from py_pg_explain_analyzer.db import PgConnection
from py_pg_explain_analyzer import PgExplainAnalyzer, AnalysisRequest, AnalysisResult
import streamlit as st
import logging
import pandas as pd
from typing import Dict, Any, List, Optional
import plotly.express as px
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é _explain_analyze
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '_explain_analyze'))


logger = logging.getLogger(__name__)


def show_explain_analysis_tab(dsn: str, mock_mode: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É 'Explain –∞–Ω–∞–ª–∏–∑' —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∞—à–±–æ—Ä–¥–æ–º."""
    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    ">
        <h1 style="font-size: 2.5rem; margin: 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
            üîç Explain –∞–Ω–∞–ª–∏–∑ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
        </h1>
        <p style="font-size: 1.2rem; margin: 1rem 0; opacity: 0.9;">
            –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        </p>
    </div>
    """, unsafe_allow_html=True)

    if mock_mode:
        st.info("üé≠ Mock —Ä–µ–∂–∏–º: –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        _show_mock_explain_analysis()
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        tab1, tab2, tab3, tab4 = st.tabs([
            "üìù –í–≤–æ–¥ SQL",
            "üìä –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∞",
            "ü§ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ"
        ])

        with tab1:
            _show_sql_input_dashboard()

        with tab2:
            if st.session_state.get('sql_query'):
                _analyze_sql_query(dsn)
            else:
                _show_analysis_placeholder()

        with tab3:
            if st.session_state.get('current_analysis'):
                _show_ai_recommendations_dashboard()
            else:
                _show_ai_placeholder()

        with tab4:
            _show_plan_comparison()

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ SQL: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_explain_analysis_tab: {e}")


def _show_sql_input_dashboard():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ SQL –∑–∞–ø—Ä–æ—Å–∞."""
    st.markdown("### üìù –í–≤–æ–¥ SQL –∑–∞–ø—Ä–æ—Å–∞")

    # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞
    st.markdown("""
    <div style="
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        border-left: 4px solid #4CAF50;
        margin-bottom: 2rem;
    ">
        <h3 style="color: #4CAF50; margin: 0 0 1rem 0;">üí° –í–≤–µ–¥–∏—Ç–µ –≤–∞—à SQL –∑–∞–ø—Ä–æ—Å</h3>
        <p style="color: #666; margin: 0;">
            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è SELECT, INSERT, UPDATE, DELETE –∑–∞–ø—Ä–æ—Å—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        </p>
    </div>
    """, unsafe_allow_html=True)

    _show_sql_input()


def _show_analysis_placeholder():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    st.markdown("""
    <div style="
        background: #f8f9fa;
        padding: 3rem;
        border-radius: 10px;
        text-align: center;
        border: 2px dashed #dee2e6;
        margin: 2rem 0;
    ">
        <h3 style="color: #6c757d; margin: 0 0 1rem 0;">üìä –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
        <p style="color: #6c757d; margin: 0;">
            –í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "üìù –í–≤–æ–¥ SQL" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
        </p>
    </div>
    """, unsafe_allow_html=True)


def _show_ai_placeholder():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    st.markdown("""
    <div style="
        background: #f8f9fa;
        padding: 3rem;
        border-radius: 10px;
        text-align: center;
        border: 2px dashed #dee2e6;
        margin: 2rem 0;
    ">
        <h3 style="color: #6c757d; margin: 0 0 1rem 0;">ü§ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
        <p style="color: #6c757d; margin: 0;">
            –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ SQL –∑–∞–ø—Ä–æ—Å–∞ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        </p>
    </div>
    """, unsafe_allow_html=True)


def _show_ai_recommendations_dashboard():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –¥–∞—à–±–æ—Ä–¥ —Å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."""
    st.markdown("### ü§ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑
    if st.session_state.get('current_analysis') and not st.session_state.get('ai_analysis_done'):
        st.session_state['run_ai_analysis'] = True
        st.session_state['ai_analysis_done'] = True
        st.rerun()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'llm_analysis_result' in st.session_state:
        _display_llm_analysis_results(st.session_state['llm_analysis_result'])


def _show_sql_input():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ SQL –∑–∞–ø—Ä–æ—Å–∞."""
    st.markdown("### üìù –í–≤–æ–¥ SQL –∑–∞–ø—Ä–æ—Å–∞")

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ SQL
    sql_query = st.text_area(
        "SQL –∑–∞–ø—Ä–æ—Å",
        value=st.session_state.get('sql_query', ''),
        height=200,
        placeholder="–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...",
        help="–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
    st.session_state['sql_query'] = sql_query

    # –ö–Ω–æ–ø–∫–∏
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
            if sql_query.strip():
                st.session_state['analyze_query'] = True
                st.session_state['run_ai_analysis'] = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    with col2:
        if st.button("üìã –û—á–∏—Å—Ç–∏—Ç—å"):
            st.session_state['sql_query'] = ""
            st.session_state['analyze_query'] = False
            st.session_state['run_ai_analysis'] = False
            st.rerun()

    with col3:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω"):
            if st.session_state.get('current_plan'):
                st.session_state['saved_plan'] = st.session_state['current_plan']
                st.success("‚úÖ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")


def _analyze_sql_query(dsn: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç SQL –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    if not st.session_state.get('analyze_query'):
        return

    sql_query = st.session_state.get('sql_query', '')
    if not sql_query.strip():
        return

    with st.spinner("–ê–Ω–∞–ª–∏–∑ SQL –∑–∞–ø—Ä–æ—Å–∞..."):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            db_conn = PgConnection(dsn)
            analyzer = PgExplainAnalyzer(db_conn)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
            analysis_request = AnalysisRequest(
                sql=sql_query,
                analyze=True,  # –í–∫–ª—é—á–∞–µ–º ANALYZE –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                verbose=True,  # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                buffers=True,  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—É—Ñ–µ—Ä–∞—Ö
                timing=True,   # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                settings=True,  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
                costs=True     # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            analysis_result = analyzer.analyze_one(analysis_request)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.session_state['current_analysis'] = analysis_result
            st.session_state['current_plan'] = analysis_result.raw_explain_json

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            _display_new_analysis_results(analysis_result)

            # LLM –∞–Ω–∞–ª–∏–∑
            _show_new_llm_analysis(analysis_result, sql_query, dsn)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–Ω–∞–ª–∏–∑–∞
            st.session_state['analyze_query'] = False

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            db_conn.close()

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ SQL: {e}")


def _execute_explain(dsn: str, sql_query: str) -> Optional[Dict[str, Any]]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç EXPLAIN –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞."""
    from app.database import DatabaseConnection

    try:
        db_conn = DatabaseConnection(dsn)

        with db_conn.get_connection() as conn:
            with conn.cursor() as cur:
                # –í—ã–ø–æ–ª–Ω—è–µ–º EXPLAIN (FORMAT JSON) - –ë–ï–ó–û–ü–ê–°–ù–û
                cur.execute("EXPLAIN (FORMAT JSON) %s", (sql_query,))
                result = cur.fetchone()

                if result and result[0]:
                    return result[0]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è EXPLAIN: {e}")
        raise

    return None


def _display_explain_results(explain_result: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã EXPLAIN."""
    st.markdown("### üìä –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    if not explain_result:
        st.warning("‚ö†Ô∏è –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞–Ω
    plan = explain_result[0] if isinstance(
        explain_result, list) else explain_result

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º JSON –ø–ª–∞–Ω
    with st.expander("üìã JSON –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"):
        st.json(plan)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω
    plan_analysis = _analyze_plan(plan)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–∫—É
    _show_plan_summary(plan_analysis)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ –ø–ª–∞–Ω–∞
    _show_plan_tree(plan)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    _show_plan_metrics(plan_analysis)


def _analyze_plan(plan: Dict[str, Any]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    analysis = {
        'total_cost': 0,
        'total_rows': 0,
        'total_time': 0,
        'node_types': [],
        'warnings': [],
        'recommendations': []
    }

    def analyze_node(node):
        if 'Plan' in node:
            plan_node = node['Plan']

            # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            analysis['total_cost'] += plan_node.get('Total Cost', 0)
            analysis['total_rows'] += plan_node.get('Plan Rows', 0)

            # –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã —É–∑–ª–æ–≤
            node_type = plan_node.get('Node Type', 'Unknown')
            analysis['node_types'].append(node_type)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
            if node_type == 'Seq Scan':
                analysis['warnings'].append(
                    "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")

            if plan_node.get('Total Cost', 0) > 1000:
                analysis['warnings'].append(
                    f"–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–∑–ª–∞: {node_type}")

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
            if 'Plans' in plan_node:
                for child in plan_node['Plans']:
                    analyze_node({'Plan': child})

    analyze_node(plan)

    return analysis


def _show_plan_summary(plan_analysis: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–∞."""
    st.markdown("#### üìà –°–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–∞")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            label="üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
            value=f"{plan_analysis['total_cost']:.2f}"
        )

    with col2:
        st.metric(
            label="üìä –°—Ç—Ä–æ–∫–∏",
            value=f"{plan_analysis['total_rows']:,}"
        )

    with col3:
        st.metric(
            label="üîß –¢–∏–ø—ã —É–∑–ª–æ–≤",
            value=len(set(plan_analysis['node_types']))
        )

    with col4:
        st.metric(
            label="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
            value=len(plan_analysis['warnings'])
        )

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if plan_analysis['warnings']:
        st.markdown("#### ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        for warning in plan_analysis['warnings']:
            st.warning(f"‚ö†Ô∏è {warning}")


def _show_plan_tree(plan: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    st.markdown("#### üå≥ –î–µ—Ä–µ–≤–æ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–µ—Ä–µ–≤–∞
    tree_data = _build_plan_tree(plan)

    if tree_data:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ
        _display_plan_tree_visualization(tree_data)


def _build_plan_tree(plan: Dict[str, Any]) -> List[Dict[str, Any]]:
    """–°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    tree_data = []

    def build_node(node, level=0):
        if 'Plan' in node:
            plan_node = node['Plan']

            node_info = {
                'level': level,
                'node_type': plan_node.get('Node Type', 'Unknown'),
                'relation_name': plan_node.get('Relation Name', ''),
                'total_cost': plan_node.get('Total Cost', 0),
                'plan_rows': plan_node.get('Plan Rows', 0),
                'startup_cost': plan_node.get('Startup Cost', 0),
                'actual_rows': plan_node.get('Actual Rows', 0),
                'actual_total_time': plan_node.get('Actual Total Time', 0)
            }

            tree_data.append(node_info)

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
            if 'Plans' in plan_node:
                for child in plan_node['Plans']:
                    build_node({'Plan': child}, level + 1)

    build_node(plan)
    return tree_data


def _display_plan_tree_visualization(tree_data: List[Dict[str, Any]]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–µ—Ä–µ–≤–∞ –ø–ª–∞–Ω–∞."""
    if not tree_data:
        return

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    import pandas as pd

    df = pd.DataFrame(tree_data)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    st.dataframe(
        df,
        width='stretch',
        hide_index=True,
        column_config={
            'level': '–£—Ä–æ–≤–µ–Ω—å',
            'node_type': '–¢–∏–ø —É–∑–ª–∞',
            'relation_name': '–¢–∞–±–ª–∏—Ü–∞',
            'total_cost': '–°—Ç–æ–∏–º–æ—Å—Ç—å',
            'plan_rows': '–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏',
            'actual_rows': '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏',
            'actual_total_time': '–í—Ä–µ–º—è (–º—Å)'
        }
    )

    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —É–∑–ª–∞–º
    if len(df) > 1:
        fig = px.bar(
            df,
            x='node_type',
            y='total_cost',
            title="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —É–∑–ª–æ–≤",
            labels={'total_cost': '–°—Ç–æ–∏–º–æ—Å—Ç—å', 'node_type': '–¢–∏–ø —É–∑–ª–∞'}
        )
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig, width='stretch')


def _show_plan_metrics(plan_analysis: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–ª–∞–Ω–∞."""
    st.markdown("#### üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø–ª–∞–Ω–∞")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —É–∑–ª–æ–≤
    if plan_analysis['node_types']:
        import pandas as pd

        node_counts = pd.Series(plan_analysis['node_types']).value_counts()

        fig = px.pie(
            values=node_counts.values,
            names=node_counts.index,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —É–∑–ª–æ–≤"
        )
        st.plotly_chart(fig, width='stretch')


def _display_new_analysis_results(analysis_result: AnalysisResult):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º JSON –ø–ª–∞–Ω
    with st.expander("üìã JSON –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"):
        st.json(analysis_result.raw_explain_json)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    if analysis_result.issues:
        st.markdown("#### ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        for issue in analysis_result.issues:
            severity_color = {
                "low": "üü°",
                "medium": "üü†",
                "high": "üî¥",
                "critical": "üö®"
            }.get(issue.severity.value, "‚ö™")

            st.markdown(f"{severity_color} **{issue.title}** ({issue.severity.value})")
            st.markdown(f"   {issue.details}")
            if issue.node_path:
                st.markdown(f"   *–ü—É—Ç—å: {issue.node_path}*")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if analysis_result.suggestions:
        st.markdown("#### üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        for suggestion in analysis_result.suggestions:
            st.markdown(f"**{suggestion.title}**")
            st.markdown(f"   {suggestion.rationale}")
            if suggestion.fix:
                st.code(suggestion.fix, language="sql")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã
    if analysis_result.index_candidates:
        st.markdown("#### üóÇÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã")
        for idx in analysis_result.index_candidates:
            st.code(idx.to_ddl(), language="sql")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º Markdown –æ—Ç—á–µ—Ç
    if analysis_result.markdown_report:
        with st.expander("üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"):
            st.markdown(analysis_result.markdown_report)


def _show_new_llm_analysis(analysis_result: AnalysisResult, sql_query: str, dsn: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç LLM –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    st.markdown("### ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI
    if not st.session_state.get('enable_ai', False):
        st.info("‚ÑπÔ∏è AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ AI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
        return

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥
    should_run_ai = st.session_state.get('run_ai_analysis', False)

    if should_run_ai or st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Å AI", type="primary"):
        with st.spinner("AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è..."):
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
                llm_payload = _prepare_analysis_for_llm(analysis_result, sql_query, dsn)

                # –ü–æ–ª—É—á–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
                llm_client = _get_llm_client()

                if llm_client:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º LLM –∞–Ω–∞–ª–∏–∑
                    logger.info("–ó–∞–ø—É—Å–∫ LLM –∞–Ω–∞–ª–∏–∑–∞...")
                    llm_result = run_llm(llm_client, llm_payload)
                    logger.info("LLM –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state
                    st.session_state['llm_analysis_result'] = llm_result

                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    _display_llm_analysis_results(llm_result)
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM –∫–ª–∏–µ–Ω—Ç")

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–∞: {e}")
            finally:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                st.session_state['run_ai_analysis'] = False


def _prepare_analysis_for_llm(analysis_result: AnalysisResult, sql_query: str, dsn: str) -> Dict[str, Any]:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è LLM."""
    try:
        # –ü–∞—Ä—Å–∏–º SQL
        sql_analyzer = SqlAnalyzer(sql_query)
        parser_output = sql_analyzer.get_tables_and_columns()
        normalized_sql = sql_analyzer.normalize()

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü
        metadata_extractor = TableInfoExtractor(dsn)
        metadata = metadata_extractor.analyze(parser_output)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
        heuristics = {
            "issues": [
                {
                    "code": issue.code,
                    "title": issue.title,
                    "severity": issue.severity.value,
                    "details": issue.details
                }
                for issue in analysis_result.issues
            ],
            "suggestions": [
                {
                    "code": sug.code,
                    "title": sug.title,
                    "rationale": sug.rationale,
                    "fix": sug.fix
                }
                for sug in analysis_result.suggestions
            ],
            "index_candidates": [
                {
                    "table": idx.table,
                    "columns": idx.columns,
                    "include": idx.include,
                    "where_predicate": idx.where_predicate
                }
                for idx in analysis_result.index_candidates
            ]
        }

        return {
            "sql": sql_query,
            "normalized_sql": normalized_sql,
            "parser_output": parser_output,
            "metadata": metadata,
            "explain_json": analysis_result.raw_explain_json,
            "heuristics": heuristics
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM: {e}")
        return {
            "sql": sql_query,
            "normalized_sql": sql_query,
            "parser_output": {},
            "metadata": {},
            "explain_json": analysis_result.raw_explain_json,
            "heuristics": {"issues": [], "suggestions": [], "index_candidates": []}
        }


def _get_llm_client():
    """–ü–æ–ª—É—á–∞–µ—Ç LLM –∫–ª–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ sidebar."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI
        if not st.session_state.get('enable_ai', False):
            return None

        ai_provider = st.session_state.get('ai_provider', 'openai')

        if ai_provider.lower() == 'openai':
            import openai
            api_key = st.session_state.get('openai_api_key', '')
            if not api_key:
                st.warning("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ sidebar –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –∞–Ω–∞–ª–∏–∑–∞.")
                return None

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            client_kwargs = {'api_key': api_key}

            if st.session_state.get('enable_proxy', True):
                proxy_host = st.session_state.get('proxy_host', 'localhost')
                proxy_port = st.session_state.get('proxy_port', 1080)
                client_kwargs['http_client'] = openai.HTTPClient(
                    proxies=f"http://{proxy_host}:{proxy_port}"
                )

            client = openai.OpenAI(**client_kwargs)
            logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return client

        elif ai_provider.lower() == 'anthropic':
            import anthropic
            api_key = st.session_state.get('anthropic_api_key', '')
            if not api_key:
                st.error("‚ùå Anthropic API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return None
            client = anthropic.Anthropic(api_key=api_key)
            logger.info("‚úÖ Anthropic –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return client

        elif ai_provider.lower() == '–ª–æ–∫–∞–ª—å–Ω—ã–π llm':
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM
            local_llm_url = st.session_state.get('local_llm_url', 'http://localhost:11434')
            local_llm_model = st.session_state.get('local_llm_model', 'llama3.1:8b')

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Ollama
            class LocalLLMClient:
                def __init__(self, base_url, model):
                    self.base_url = base_url
                    self.model = model

                def chat(self):
                    return self

                def completions(self):
                    return self

                def create(self, **kwargs):
                    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM
                    return type('Response', (), {
                        'choices': [type('Choice', (), {
                            'message': type('Message', (), {
                                'content': '–õ–æ–∫–∞–ª—å–Ω—ã–π LLM –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenAI —Å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ Anthropic.'
                            })()
                        })()]
                    })()

            client = LocalLLMClient(local_llm_url, local_llm_model)
            logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π LLM –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {local_llm_url}/{local_llm_model}")
            return client

        else:
            st.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä AI: {ai_provider}")
            return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
        return None


def _display_llm_analysis_results(llm_result: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã LLM –∞–Ω–∞–ª–∏–∑–∞."""
    st.markdown("#### üéØ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

    # –ü—Ä–æ–±–ª–µ–º—ã
    if llm_result.get('problems'):
        st.markdown("##### üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        for problem in llm_result['problems']:
            severity_icon = {
                "low": "üü°",
                "medium": "üü†",
                "high": "üî¥",
                "critical": "üö®"
            }.get(problem.get('severity', 'low'), "‚ö™")

            st.markdown(f"{severity_icon} **{problem.get('title', '–ü—Ä–æ–±–ª–µ–º–∞')}**")
            st.markdown(f"   {problem.get('details', '')}")

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if llm_result.get('warnings'):
        st.markdown("##### ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        for warning in llm_result['warnings']:
            st.markdown(f"‚ö†Ô∏è **{warning.get('title', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')}**")
            st.markdown(f"   {warning.get('details', '')}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if llm_result.get('recommendations'):
        st.markdown("##### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        for rec in llm_result['recommendations']:
            st.markdown(f"**{rec.get('title', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')}**")
            if rec.get('actions'):
                for action in rec['actions']:
                    if action.get('sql'):
                        st.code(action['sql'], language="sql")
                    if action.get('note'):
                        st.markdown(f"   *{action['note']}*")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π SQL
    if llm_result.get('fixed_sql'):
        st.markdown("##### üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL")
        st.code(llm_result['fixed_sql'], language="sql")

    # –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    if llm_result.get('raw_content'):
        with st.expander("üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç LLM"):
            st.text(llm_result['raw_content'])


def _show_plan_comparison():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤."""
    st.markdown("### üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤")

    current_plan = st.session_state.get('current_plan')
    saved_plan = st.session_state.get('saved_plan')

    if not current_plan and not saved_plan:
        st.info("‚ÑπÔ∏è –ù–µ—Ç –ø–ª–∞–Ω–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return

    if current_plan and saved_plan:
        st.markdown("#### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–ª–∞–Ω—ã
        comparison = _compare_plans(current_plan, saved_plan)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        _display_plan_comparison(comparison)

    elif current_plan:
        st.info("‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: –µ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–ª–∞–Ω: –Ω–µ—Ç")

    elif saved_plan:
        st.info("‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–ª–∞–Ω: –µ—Å—Ç—å")


def _compare_plans(plan1: Dict[str, Any],
                   plan2: Dict[str, Any]) -> Dict[str, Any]:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    analysis1 = _analyze_plan(plan1)
    analysis2 = _analyze_plan(plan2)

    comparison = {
        'plan1': analysis1,
        'plan2': analysis2,
        'differences': {
            'cost_diff': analysis1['total_cost'] - analysis2['total_cost'],
            'rows_diff': analysis1['total_rows'] - analysis2['total_rows'],
            'warnings_diff': len(analysis1['warnings']) - len(analysis2['warnings'])
        }
    }

    return comparison


def _display_plan_comparison(comparison: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤."""
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### üìä –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω")
        st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å", f"{comparison['plan1']['total_cost']:.2f}")
        st.metric("–°—Ç—Ä–æ–∫–∏", f"{comparison['plan1']['total_rows']:,}")
        st.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", len(comparison['plan1']['warnings']))

    with col2:
        st.markdown("#### üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–ª–∞–Ω")
        st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å", f"{comparison['plan2']['total_cost']:.2f}")
        st.metric("–°—Ç—Ä–æ–∫–∏", f"{comparison['plan2']['total_rows']:,}")
        st.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", len(comparison['plan2']['warnings']))

    # –†–∞–∑–ª–∏—á–∏—è
    st.markdown("#### üîÑ –†–∞–∑–ª–∏—á–∏—è")
    diff = comparison['differences']

    if diff['cost_diff'] > 0:
        st.warning(f"‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω –¥–æ—Ä–æ–∂–µ –Ω–∞ {diff['cost_diff']:.2f}")
    elif diff['cost_diff'] < 0:
        st.success(f"‚úÖ –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω –¥–µ—à–µ–≤–ª–µ –Ω–∞ {abs(diff['cost_diff']):.2f}")
    else:
        st.info("‚ÑπÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞–Ω–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–∞")


def _show_mock_explain_analysis():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è explain –∞–Ω–∞–ª–∏–∑–∞."""
    st.markdown("### üìù –í–≤–æ–¥ SQL –∑–∞–ø—Ä–æ—Å–∞ (Mock)")

    st.text_area(
        "SQL –∑–∞–ø—Ä–æ—Å",
        value="SELECT * FROM users WHERE created_at > '2024-01-01'",
        height=200,
        disabled=True
    )

    st.markdown("### üìä –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (Mock –¥–∞–Ω–Ω—ã–µ)")

    # Mock –ø–ª–∞–Ω
    mock_plan = {
        "Plan": {
            "Node Type": "Seq Scan",
            "Relation Name": "users",
            "Total Cost": 1500.00,
            "Plan Rows": 10000,
            "Startup Cost": 0.00,
            "Actual Rows": 10000,
            "Actual Total Time": 45.123
        }
    }

    with st.expander("üìã JSON –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (Mock)"):
        st.json(mock_plan)

    st.markdown("#### üìà –°–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–∞ (Mock)")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "1500.00")

    with col2:
        st.metric("üìä –°—Ç—Ä–æ–∫–∏", "10,000")

    with col3:
        st.metric("üîß –¢–∏–ø—ã —É–∑–ª–æ–≤", "1")

    with col4:
        st.metric("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "1")

    st.warning("‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")

    st.markdown("#### üå≥ –î–µ—Ä–µ–≤–æ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (Mock)")

    mock_tree_data = pd.DataFrame({
        'level': [0],
        'node_type': ['Seq Scan'],
        'relation_name': ['users'],
        'total_cost': [1500.00],
        'plan_rows': [10000],
        'actual_rows': [10000],
        'actual_total_time': [45.123]
    })

    st.dataframe(mock_tree_data, width='stretch', hide_index=True)

    st.markdown("### ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (Mock)")
    st.info("‚ÑπÔ∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ mock —Ä–µ–∂–∏–º–µ")
