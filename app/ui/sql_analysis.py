"""–ú–æ–¥—É–ª—å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ SQL."""

import streamlit as st
import json
import pandas as pd
import plotly.express as px
from datetime import datetime
import time

from app.analyzer import SQLAnalyzer


def show_sql_analysis_tab(
        dsn,
        mock_mode,
        work_mem,
        shared_buffers,
        effective_cache_size,
        custom_config):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞ SQL —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not dsn:
        st.warning(
            "‚ö†Ô∏è –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ SQL –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return

    # –í–≤–æ–¥ SQL —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    st.markdown("## üîç –ê–Ω–∞–ª–∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞")

    col1, col2 = st.columns([3, 1])

    with col1:
        sql_input = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            height=200,
            placeholder="SELECT u.name, o.total_amount \nFROM users u \nJOIN orders o ON u.id = o.user_id \nWHERE o.total_amount > 1000;",
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è SELECT, WITH, JOIN, –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã")

    with col2:
        st.markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
        uploaded_file = st.file_uploader(
            "–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ .sql —Ñ–∞–π–ª:",
            type=['sql'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã .sql"
        )

        if uploaded_file is not None:
            sql_input = uploaded_file.getvalue().decode("utf-8")
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:", value=sql_input, height=150)

    # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        analyze_button = st.button(
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SQL",
            type="primary",
            width='stretch',
            disabled=not sql_input.strip() or not dsn
        )

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if analyze_button and sql_input.strip():
        with st.spinner("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞..."):
            time.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

    # –ê–Ω–∞–ª–∏–∑ SQL
    if analyze_button and sql_input.strip():
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            analyzer = SQLAnalyzer(dsn, custom_config)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SQL
            result = analyzer.analyze_sql(sql_input)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            display_analysis_results(result, analyzer)

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            st.exception(e)


def display_analysis_results(result, analyzer):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""

    # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    st.success("üéâ –ê–Ω–∞–ª–∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    if result.metrics:
        st.markdown("## üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.markdown("""
            <div class="metric-card">
                <h3>‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
                <h2>{:.2f} –º—Å</h2>
                <p>–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è</p>
            </div>
            """.format(result.metrics.estimated_time_ms), unsafe_allow_html=True)

        with col2:
            st.markdown("""
            <div class="metric-card">
                <h3>üíæ I/O –æ–ø–µ—Ä–∞—Ü–∏–∏</h3>
                <h2>{:.2f} MB</h2>
                <p>–û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</p>
            </div>
            """.format(result.metrics.estimated_io_mb), unsafe_allow_html=True)

        with col3:
            st.markdown("""
            <div class="metric-card">
                <h3>üß† –ü–∞–º—è—Ç—å</h3>
                <h2>{:.2f} MB</h2>
                <p>–û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</p>
            </div>
            """.format(result.metrics.estimated_memory_mb), unsafe_allow_html=True)

        with col4:
            st.markdown("""
            <div class="metric-card">
                <h3>üìä –°—Ç—Ä–æ–∫–∏</h3>
                <h2>{:,}</h2>
                <p>–û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</p>
            </div>
            """.format(result.metrics.estimated_rows), unsafe_allow_html=True)

    # –°–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if result.plan_summary:
        st.markdown("## üìã –°–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

        col1, col2 = st.columns(2)

        with col1:
            st.json(result.plan_summary)

        with col2:
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∞
            if result.explain_json:
                create_plan_visualization(result.explain_json)

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if result.recommendations:
        st.markdown("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        high_recs = [
            r for r in result.recommendations if r.priority.value == "high"]
        medium_recs = [
            r for r in result.recommendations if r.priority.value == "medium"]
        low_recs = [
            r for r in result.recommendations if r.priority.value == "low"]

        # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if high_recs:
            st.markdown("### üö® –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
            for rec in high_recs:
                with st.expander(f"üî¥ {rec.title}", expanded=True):
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {rec.description}")
                    st.markdown(
                        f"**–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:** {rec.potential_improvement}")
                    if hasattr(rec, 'sql_example') and rec.sql_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä SQL:**")
                        st.code(rec.sql_example, language="sql")
                    if hasattr(
                            rec,
                            'configuration_example') and rec.configuration_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**")
                        st.code(rec.configuration_example, language="sql")

        # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if medium_recs:
            st.markdown("### ‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
            for rec in medium_recs:
                with st.expander(f"üü° {rec.title}"):
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {rec.description}")
                    st.markdown(
                        f"**–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:** {rec.potential_improvement}")
                    if hasattr(rec, 'sql_example') and rec.sql_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä SQL:**")
                        st.code(rec.sql_example, language="sql")
                    if hasattr(
                            rec,
                            'configuration_example') and rec.configuration_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**")
                        st.code(rec.configuration_example, language="sql")

        # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if low_recs:
            st.markdown("### ‚ÑπÔ∏è –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
            for rec in low_recs:
                with st.expander(f"üü¢ {rec.title}"):
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {rec.description}")
                    st.markdown(
                        f"**–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:** {rec.potential_improvement}")
                    if hasattr(rec, 'sql_example') and rec.sql_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä SQL:**")
                        st.code(rec.sql_example, language="sql")
                    if hasattr(
                            rec,
                            'configuration_example') and rec.configuration_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**")
                        st.code(rec.configuration_example, language="sql")

    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.markdown("## üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        # JSON —ç–∫—Å–ø–æ—Ä—Ç
        json_report = analyzer.export_analysis_report(result, "json")
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å JSON",
            data=json_report,
            file_name=f"sql_analysis_{
                datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json",
            width='stretch')

    with col2:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        text_report = analyzer.export_analysis_report(result, "text")
        st.download_button(
            label="üìù –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç",
            data=text_report,
            file_name=f"sql_analysis_{
                datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            mime="text/plain",
            width='stretch')

    with col3:
        # Raw EXPLAIN JSON
        if result.explain_json:
            st.download_button(
                label="üîç –°–∫–∞—á–∞—Ç—å EXPLAIN",
                data=json.dumps(
                    result.explain_json,
                    indent=2),
                file_name=f"explain_{
                    datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json",
                width='stretch')

    with col4:
        # PDF —ç–∫—Å–ø–æ—Ä—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å PDF",
            data="PDF content would go here",
            file_name=f"sql_analysis_{
                datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
            mime="application/pdf",
            width='stretch',
            disabled=True,
            help="PDF —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    # –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
    with st.expander("üîç –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞", expanded=False):
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è")
            if result.is_valid:
                st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–µ–Ω")
            else:
                st.error("‚ùå –ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:")
                for error in result.validation_errors:
                    st.write(f"‚Ä¢ {error}")

        with col2:
            st.markdown("### ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            st.json(result.config_used)

        st.markdown(f"**‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:** {result.analysis_time:.3f} —Å–µ–∫—É–Ω–¥")


def create_plan_visualization(explain_json):
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–∑–ª—ã –ø–ª–∞–Ω–∞
        def extract_nodes(plan, level=0):
            nodes = []
            if 'Node Type' in plan:
                nodes.append({
                    'level': level,
                    'type': plan['Node Type'],
                    'cost': plan.get('Total Cost', 0),
                    'rows': plan.get('Plan Rows', 0),
                    'width': plan.get('Plan Width', 0)
                })

            if 'Plans' in plan:
                for child in plan['Plans']:
                    nodes.extend(extract_nodes(child, level + 1))

            return nodes

        nodes = extract_nodes(explain_json.get('Plan', {}))

        if nodes:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            df = pd.DataFrame(nodes)

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
            fig = px.bar(
                df,
                x='level',
                y='cost',
                color='type',
                title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                labels={
                    'level': '–£—Ä–æ–≤–µ–Ω—å',
                    'cost': '–°—Ç–æ–∏–º–æ—Å—Ç—å',
                    'type': '–¢–∏–ø —É–∑–ª–∞'},
                color_discrete_sequence=px.colors.qualitative.Set3)

            fig.update_layout(
                height=400,
                showlegend=True,
                xaxis_title="–£—Ä–æ–≤–µ–Ω—å –ø–ª–∞–Ω–∞",
                yaxis_title="–°—Ç–æ–∏–º–æ—Å—Ç—å (cost)"
            )

            st.plotly_chart(fig, width='stretch')

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ
            st.markdown("### üìä –î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞")
            st.dataframe(
                df[['level', 'type', 'cost', 'rows', 'width']].sort_values('level'),
                width='stretch'
            )

    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é: {e}")
