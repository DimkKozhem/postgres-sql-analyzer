"""–ú–æ–¥—É–ª—å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤."""

import streamlit as st

from app.analyzer import SQLAnalyzer


def show_examples_tab(
        dsn,
        mock_mode,
        work_mem,
        shared_buffers,
        effective_cache_size,
        custom_config):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    st.markdown("## üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")

    try:
        analyzer = SQLAnalyzer(dsn)
        examples = analyzer.get_example_queries()

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        example_tabs = st.tabs([f"üìù {ex['name']}" for ex in examples])

        for i, (example, tab) in enumerate(zip(examples, example_tabs)):
            with tab:
                st.markdown(f"### {example['name']}")
                st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {example['description']}")

                # SQL –∫–æ–¥ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –±–ª–æ–∫–µ
                st.markdown("**SQL –∑–∞–ø—Ä–æ—Å:**")
                st.code(example['sql'], language="sql")

                # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                if st.button(
                        f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä {
                            i + 1}",
                        key=f"analyze_{i}"):
                    try:
                        with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∏–º–µ—Ä..."):
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
                            result = analyzer.analyze_sql(
                                example['sql'], custom_config)

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")

                            if result.metrics:
                                col1, col2, col3 = st.columns(3)
                                with col1:
                                    st.metric(
                                        "‚è±Ô∏è –í—Ä–µ–º—è", f"{
                                            result.metrics.estimated_time_ms:.2f} –º—Å")
                                with col2:
                                    st.metric(
                                        "üíæ I/O", f"{result.metrics.estimated_io_mb:.2f} MB")
                                with col3:
                                    st.metric(
                                        "üß† –ü–∞–º—è—Ç—å", f"{
                                            result.metrics.estimated_memory_mb:.2f} MB")

                            if result.recommendations:
                                st.markdown(
                                    f"**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** {len(result.recommendations)} –Ω–∞–π–¥–µ–Ω–æ")
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                for rec in result.recommendations[:3]:
                                    st.write(
                                        f"‚Ä¢ {
                                            rec.title} ({
                                            rec.priority.value})")

                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–º–µ—Ä–∞: {e}")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
