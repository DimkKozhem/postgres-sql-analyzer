"""–ú–æ–¥—É–ª—å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""

import streamlit as st
import json

from app.analyzer import SQLAnalyzer
from app.ui.sql_analysis import create_plan_visualization


def show_execution_plans_tab(dsn, mock_mode):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    st.markdown("## üîç –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    if not dsn:
        st.warning("‚ö†Ô∏è –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü—Ä–∏–º–µ—Ä—ã –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    st.markdown("### üìä –¢–∏–ø—ã —É–∑–ª–æ–≤ –ø–ª–∞–Ω–æ–≤")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        **üîç –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**
        - **Seq Scan** - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        - **Index Scan** - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        - **Bitmap Scan** - –±–∏—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        - **Tid Scan** - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ TID

        **üîó –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:**
        - **Nested Loop** - –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
        - **Hash Join** - —Ö–µ—à-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        - **Merge Join** - —Å–ª–∏—è–Ω–∏–µ-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        """)

    with col2:
        st.markdown("""
        **üìä –û–ø–µ—Ä–∞—Ü–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:**
        - **HashAggregate** - —Ö–µ—à-–∞–≥—Ä–µ–≥–∞—Ü–∏—è
        - **GroupAggregate** - –≥—Ä—É–ø–ø–æ–≤–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è

        **üìù –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:**
        - **Sort** - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        - **Incremental Sort** - –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞

        **üîÑ –î—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**
        - **Limit** - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        - **WindowAgg** - –æ–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        """)

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤
    st.markdown("### üîç –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞")

    plan_json = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ JSON –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (EXPLAIN FORMAT JSON):",
        height=200,
        placeholder='{"Plan": {"Node Type": "Seq Scan", "Total Cost": 100, "Plan Rows": 1000}}',
        help="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã EXPLAIN (FORMAT JSON)")

    if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω", width='stretch'):
        if plan_json.strip():
            try:
                plan_data = json.loads(plan_json)
                st.success("‚úÖ –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω!")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω
                analyzer = SQLAnalyzer(dsn)
                plan_parser = analyzer.plan_parser

                # –ü–∞—Ä—Å–∏–º –ø–ª–∞–Ω
                plan = plan_parser.parse_explain_json(plan_data)
                plan_summary = plan_parser.get_plan_summary(plan)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
                st.markdown("### üìã –°–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–∞")
                st.json(plan_summary)

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                create_plan_visualization(plan_data)

            except json.JSONDecodeError:
                st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–∞: {e}")
        else:
            st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
