"""CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è PostgreSQL SQL Analyzer."""

import click
import json
import sys
from typing import Optional

from .analyzer import SQLAnalyzer


@click.group()
@click.version_option(version="0.1.0")
def cli():
    """PostgreSQL SQL Analyzer - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤."""


@cli.command()
@click.option('--sql', '-s', help='SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
@click.option('--file', '-f', type=click.Path(exists=True),
              help='–§–∞–π–ª —Å SQL-–∑–∞–ø—Ä–æ—Å–æ–º')
@click.option('--dsn', '-d', required=True,
              help='DSN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL')
@click.option('--output', '-o', type=click.Path(),
              help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
@click.option('--format',
              'output_format',
              type=click.Choice(['json',
                                 'text']),
              default='json',
              help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
@click.option('--work-mem', type=int, default=4, help='work_mem –≤ MB')
@click.option('--shared-buffers', type=int,
              default=128, help='shared_buffers –≤ MB')
@click.option('--effective-cache-size', type=int,
              default=4, help='effective_cache_size –≤ GB')
@click.option('--large-table-threshold', type=int,
              default=1000000, help='–ü–æ—Ä–æ–≥ –±–æ–ª—å—à–æ–π —Ç–∞–±–ª–∏—Ü—ã')
@click.option('--expensive-query-threshold', type=float,
              default=1000.0, help='–ü–æ—Ä–æ–≥ –¥–æ—Ä–æ–≥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞')
def analyze(sql: Optional[str], file: Optional[str], dsn: str,
            output: Optional[str], output_format: str, **config_options):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å."""

    # –ü–æ–ª—É—á–∞–µ–º SQL
    if file:
        try:
            with open(file, 'r', encoding='utf-8') as f:
                sql = f.read().strip()
        except Exception as e:
            click.echo(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}", err=True)
            sys.exit(1)
    elif not sql:
        click.echo(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ --sql –∏–ª–∏ --file",
            err=True)
        sys.exit(1)

    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SQLAnalyzer(dsn)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        custom_config = {
            'work_mem': config_options['work_mem'],
            'shared_buffers': config_options['shared_buffers'],
            'effective_cache_size': config_options['effective_cache_size'],
            'large_table_threshold': config_options['large_table_threshold'],
            'expensive_query_threshold': config_options['expensive_query_threshold']}

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SQL
        click.echo("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ SQL...")
        result = analyzer.analyze_sql(sql, custom_config)

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        report = analyzer.export_analysis_report(result, output_format)

        if output:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(output, 'w', encoding='utf-8') as f:
                f.write(report)
            click.echo(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output}")
        else:
            # –í—ã–≤–æ–¥–∏–º –≤ stdout
            click.echo(report)

        # –°—Ç–∞—Ç—É—Å –≤—ã—Ö–æ–¥–∞
        if not result.is_valid:
            sys.exit(1)

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.option('--dsn', '-d', required=True,
              help='DSN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL')
@click.option('--limit', '-l', type=int, default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
@click.option('--output', '-o', type=click.Path(),
              help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
def stats(dsn: str, limit: int, output: Optional[str]):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ pg_stat_statements."""

    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SQLAnalyzer(dsn)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        click.echo("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats_data = analyzer.get_pg_stat_statements(limit)

        if not stats_data:
            click.echo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "total_queries": len(stats_data),
            "total_calls": sum(s['calls'] for s in stats_data),
            "total_time": sum(s['total_time'] for s in stats_data),
            "queries": stats_data
        }

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if output:
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
            click.echo(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output}")
        else:
            click.echo(json.dumps(result, indent=2, ensure_ascii=False))

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.option('--output', '-o', type=click.Path(),
              help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤')
def examples(output: Optional[str]):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π DSN, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã
        analyzer = SQLAnalyzer("postgresql://dummy:dummy@localhost/dummy")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        examples_data = analyzer.get_example_queries()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "examples": examples_data,
            "total": len(examples_data)
        }

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if output:
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
            click.echo(f"‚úÖ –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output}")
        else:
            click.echo("üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
            click.echo()

            for i, example in enumerate(examples_data, 1):
                click.echo(f"{i}. {example['name']}")
                click.echo(f"   {example['description']}")
                click.echo(f"   SQL: {example['sql'].strip()}")
                click.echo()

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.option('--dsn', '-d', required=True,
              help='DSN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL')
@click.option('--work-mem', type=int, default=4, help='work_mem –≤ MB')
@click.option('--shared-buffers', type=int,
              default=128, help='shared_buffers –≤ MB')
@click.option('--effective-cache-size', type=int,
              default=4, help='effective_cache_size –≤ GB')
def test(dsn: str, **config_options):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö."""

    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SQLAnalyzer(dsn)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        custom_config = {
            'work_mem': config_options['work_mem'],
            'shared_buffers': config_options['shared_buffers'],
            'effective_cache_size': config_options['effective_cache_size']
        }

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        examples_data = analyzer.get_example_queries()

        click.echo("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        click.echo()

        total_tests = len(examples_data)
        passed_tests = 0

        for i, example in enumerate(examples_data, 1):
            click.echo(f"–¢–µ—Å—Ç {i}/{total_tests}: {example['name']}")

            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
                result = analyzer.analyze_sql(example['sql'], custom_config)

                if result.is_valid:
                    click.echo("  ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                    if result.metrics:
                        click.echo(
                            f"     –í—Ä–µ–º—è: {
                                result.metrics.estimated_time_ms:.2f} –º—Å")
                        click.echo(
                            f"     I/O: {result.metrics.estimated_io_mb:.2f} MB")
                        click.echo(
                            f"     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(result.recommendations)}")
                    passed_tests += 1
                else:
                    click.echo(
                        f"  ‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {
                            result.validation_errors}")

            except Exception as e:
                click.echo(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

            click.echo()

        # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        click.echo("=" * 50)
        click.echo(
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} –ø—Ä–æ—à–ª–∏")

        if passed_tests == total_tests:
            click.echo("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            click.echo("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            sys.exit(1)

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", err=True)
        sys.exit(1)


@cli.command()
def config():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""

    try:
        from .config import get_default_config

        config_data = get_default_config()

        click.echo("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
        click.echo()

        for key, value in config_data.items():
            click.echo(f"  {key}: {value}")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", err=True)
        sys.exit(1)


if __name__ == '__main__':
    cli()
