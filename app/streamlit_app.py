"""–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è PostgreSQL SQL Analyzer."""

import streamlit as st
import json
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
import time

from app.analyzer import SQLAnalyzer
from app.config import get_default_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="PostgreSQL SQL Analyzer",
    page_icon="üêò",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/your-repo/postgres-sql-analyzer',
        'Report a bug': "https://github.com/your-repo/postgres-sql-analyzer/issues",
        'About': "# PostgreSQL SQL Analyzer\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤"
    }
)

# CSS —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .connection-status {
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    .connection-success {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    
    .connection-error {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
    
    .stButton > button {
        border-radius: 25px;
        padding: 0.5rem 2rem;
        font-weight: bold;
        border: none;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
</style>
""", unsafe_allow_html=True)

def test_database_connection(dsn):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        analyzer = SQLAnalyzer(dsn, mock_mode=False)
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
        test_result = analyzer.analyze_sql("SELECT 1 as test;")
        return True, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞."
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

def test_openai_connection(api_key):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API."""
    try:
        import openai
        openai.api_key = api_key
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        models = openai.Model.list()
        return True
    except Exception as e:
        return False

def test_anthropic_connection(api_key):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Anthropic API."""
    try:
        import requests
        headers = {
            "x-api-key": api_key,
            "Content-Type": "application/json",
            "anthropic-version": "2023-06-01"
        }
        response = requests.get("https://api.anthropic.com/v1/models", headers=headers, timeout=10)
        return response.status_code == 200
    except Exception as e:
        return False

def test_local_llm_connection(url, model):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É LLM."""
    try:
        import requests
        # –ü—Ä–æ–±—É–µ–º Ollama —Ñ–æ—Ä–º–∞—Ç
        try:
            data = {"model": model, "prompt": "test", "stream": False}
            response = requests.post(f"{url}/api/generate", json=data, timeout=10)
            return response.status_code == 200
        except:
            # –ü—Ä–æ–±—É–µ–º LM Studio —Ñ–æ—Ä–º–∞—Ç
            data = {"model": model, "messages": [{"role": "user", "content": "test"}]}
            response = requests.post(f"{url}/v1/chat/completions", json=data, timeout=10)
            return response.status_code == 200
    except Exception as e:
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    st.markdown("""
    <div class="main-header">
        <h1>üêò PostgreSQL SQL Analyzer</h1>
        <p style="font-size: 1.2rem; margin: 0;">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ PostgreSQL</p>
        <p style="font-size: 1rem; margin: 0; opacity: 0.9;">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        st.markdown("### üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        mock_mode = st.checkbox(
            "Mock —Ä–µ–∂–∏–º (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î)", 
            value=False,
            help="–í–∫–ª—é—á–∏—Ç–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not mock_mode:
            st.markdown("### üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            host = st.text_input("–•–æ—Å—Ç", value="localhost", help="IP –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞")
            port = st.number_input("–ü–æ—Ä—Ç", value=5432, min_value=1, max_value=65535, help="–ü–æ—Ä—Ç PostgreSQL")
            database = st.text_input("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", value="postgres", help="–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            username = st.text_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value="postgres", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", help="–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º DSN
            dsn = f"postgresql://{username}:{password}@{host}:{port}/{database}"
            
            # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if st.button("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", use_container_width=True):
                with st.spinner("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."):
                    success, message = test_database_connection(dsn)
                    if success:
                        st.success(message)
                        st.session_state['dsn'] = dsn
                        st.session_state['connection_status'] = 'success'
                    else:
                        st.error(message)
                        st.session_state['connection_status'] = 'error'
            
            # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if 'connection_status' in st.session_state:
                if st.session_state['connection_status'] == 'success':
                    st.markdown("""
                    <div class="connection-status connection-success">
                        <strong>üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ</strong><br>
                        –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∞–Ω–∞–ª–∏–∑—É
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown("""
                    <div class="connection-status connection-error">
                        <strong>üî¥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</strong><br>
                        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    </div>
                    """, unsafe_allow_html=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º DSN –≤ —Å–µ—Å—Å–∏–∏
            if 'dsn' in st.session_state:
                dsn = st.session_state['dsn']
            else:
                dsn = None
                
        else:
            dsn = None
            st.success("‚úÖ Mock —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PostgreSQL
        st.markdown("### üêò –ü–∞—Ä–∞–º–µ—Ç—Ä—ã PostgreSQL")
        
        col1, col2 = st.columns(2)
        with col1:
            work_mem = st.slider(
                "work_mem (MB)", 
                1, 512, 4,
                help="–ü–∞–º—è—Ç—å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            shared_buffers = st.slider(
                "shared_buffers (MB)", 
                32, 2048, 128,
                help="–û–±—â–∏–π –±—É—Ñ–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
            )
        
        with col2:
            effective_cache_size = st.slider(
                "effective_cache_size (GB)", 
                1, 32, 4,
                help="–†–∞–∑–º–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫—ç—à–∞"
            )
        
        # –ü–æ—Ä–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞
        st.markdown("### üìä –ü–æ—Ä–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞")
        large_table_threshold = st.number_input(
            "–ü–æ—Ä–æ–≥ '–±–æ–ª—å—à–æ–π' —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫)",
            value=1000000,
            step=100000,
            format="%d",
            help="–¢–∞–±–ª–∏—Ü—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫ —Å—á–∏—Ç–∞—é—Ç—Å—è '–±–æ–ª—å—à–∏–º–∏'"
        )
        
        expensive_query_threshold = st.number_input(
            "–ü–æ—Ä–æ–≥ '–¥–æ—Ä–æ–≥–æ–≥–æ' –∑–∞–ø—Ä–æ—Å–∞ (cost)",
            value=1000.0,
            step=100.0,
            format="%.1f",
            help="–ó–∞–ø—Ä–æ—Å—ã —Å cost –≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–∏—Ç–∞—é—Ç—Å—è '–¥–æ—Ä–æ–≥–∏–º–∏'"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if st.button("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True):
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
            time.sleep(1)
            st.rerun()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
        st.markdown("---")
        st.markdown("### ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM")
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        enable_ai = st.checkbox(
            "–í–∫–ª—é—á–∏—Ç—å AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", 
            value=False, 
            help="–ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"
        )
        
        if enable_ai:
            # –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ LLM
            llm_provider = st.selectbox(
                "LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä",
                options=["openai", "anthropic", "local"],
                help="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏"
            )
            
            if llm_provider == "openai":
                openai_api_key = st.text_input(
                    "OpenAI API –∫–ª—é—á",
                    type="password",
                    help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á"
                )
                
                openai_model = st.selectbox(
                    "OpenAI –º–æ–¥–µ–ª—å",
                    options=["gpt-4", "gpt-3.5-turbo", "gpt-4-turbo"],
                    index=0,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å OpenAI"
                )
                
                openai_temperature = st.slider(
                    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    min_value=0.0,
                    max_value=2.0,
                    value=0.7,
                    step=0.1,
                    help="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ (0.0 = –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, 2.0 = –æ—á–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π)"
                )
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenAI
                if openai_api_key:
                    st.session_state['openai_api_key'] = openai_api_key
                    st.session_state['openai_model'] = openai_model
                    st.session_state['openai_temperature'] = openai_temperature
                    
                    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI
                    if st.button("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å OpenAI", key="test_openai"):
                        with st.spinner("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI..."):
                            if test_openai_connection(openai_api_key):
                                st.success("üü¢ OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
                            else:
                                st.error("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI")
            
            elif llm_provider == "anthropic":
                anthropic_api_key = st.text_input(
                    "Anthropic API –∫–ª—é—á",
                    type="password",
                    help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Anthropic API –∫–ª—é—á"
                )
                
                anthropic_model = st.selectbox(
                    "Anthropic –º–æ–¥–µ–ª—å",
                    options=["claude-3-sonnet", "claude-3-haiku", "claude-3-opus"],
                    index=0,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Anthropic"
                )
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Anthropic
                if anthropic_api_key:
                    st.session_state['anthropic_api_key'] = anthropic_api_key
                    st.session_state['anthropic_model'] = anthropic_model
                    
                    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Anthropic
                    if st.button("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Anthropic", key="test_anthropic"):
                        with st.spinner("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Anthropic..."):
                            if test_anthropic_connection(anthropic_api_key):
                                st.success("üü¢ Anthropic –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
                            else:
                                st.error("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Anthropic")
            
            elif llm_provider == "local":
                local_llm_url = st.text_input(
                    "URL –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM",
                    value="http://localhost:11434",
                    help="URL –¥–ª—è Ollama –∏–ª–∏ LM Studio"
                )
                
                local_llm_model = st.text_input(
                    "–ú–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM",
                    value="llama2",
                    help="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, llama2, mistral)"
                )
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM
                if local_llm_url and local_llm_model:
                    st.session_state['local_llm_url'] = local_llm_url
                    st.session_state['local_llm_model'] = local_llm_model
                    
                    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É LLM
                    if st.button("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π LLM", key="test_local"):
                        with st.spinner("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É LLM..."):
                            if test_local_llm_connection(local_llm_url, local_llm_model):
                                st.success("üü¢ –õ–æ–∫–∞–ª—å–Ω—ã–π LLM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
                            else:
                                st.error("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É LLM")
            
            # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
            ai_confidence_threshold = st.slider(
                "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ AI",
                min_value=0.0,
                max_value=1.0,
                value=0.7,
                step=0.05,
                help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫–∞–∑–∞ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            st.session_state['enable_ai_recommendations'] = True
            st.session_state['ai_provider'] = llm_provider
            st.session_state['ai_confidence_threshold'] = ai_confidence_threshold
            
            # –°—Ç–∞—Ç—É—Å LLM
            st.success(f"ü§ñ LLM: {llm_provider.upper()}")
        else:
            st.session_state['enable_ai_recommendations'] = False
            st.info("ü§ñ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.markdown("---")
        st.markdown("### ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.info(f"**Streamlit:** {st.__version__}")
        st.info(f"**Mock —Ä–µ–∂–∏–º:** {'–í–∫–ª—é—á–µ–Ω' if mock_mode else '–í—ã–∫–ª—é—á–µ–Ω'}")
        if not mock_mode and dsn:
            st.info("**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** –ü–æ–¥–∫–ª—é—á–µ–Ω–∞")
        else:
            st.info("**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        if enable_ai:
            st.info(f"**LLM:** {llm_provider.upper()}")
        else:
            st.info("**LLM:** –û—Ç–∫–ª—é—á–µ–Ω")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìù –ê–Ω–∞–ª–∏–∑ SQL", 
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
        "üìã –ü—Ä–∏–º–µ—Ä—ã", 
        "üîç –ü–ª–∞–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"
    ])
    
    with tab1:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –∏–∑ session_state
        enable_ai = st.session_state.get('enable_ai_recommendations', False)
        ai_provider = st.session_state.get('ai_provider', 'auto')
        ai_confidence_threshold = st.session_state.get('ai_confidence_threshold', 0.7)
        
        # API –∫–ª—é—á–∏
        openai_api_key = st.session_state.get('openai_api_key', '')
        anthropic_api_key = st.session_state.get('anthropic_api_key', '')
        local_llm_url = st.session_state.get('local_llm_url', '')
        local_llm_model = st.session_state.get('local_llm_model', '')
        
        show_sql_analysis_tab(
            dsn, mock_mode, work_mem, shared_buffers, effective_cache_size, 
            large_table_threshold, expensive_query_threshold,
            enable_ai, ai_provider, ai_confidence_threshold,
            openai_api_key, anthropic_api_key, local_llm_url, local_llm_model
        )
    
    with tab2:
        show_statistics_tab(dsn, mock_mode)
    
    with tab3:
        show_examples_tab(
            dsn, mock_mode, work_mem, shared_buffers, effective_cache_size,
            large_table_threshold, expensive_query_threshold
        )
    
    with tab4:
        show_execution_plans_tab(dsn, mock_mode)
    
    with tab5:
        show_help_tab()


def show_sql_analysis_tab(dsn, mock_mode, work_mem, shared_buffers, effective_cache_size,
                          large_table_threshold, expensive_query_threshold,
                          enable_ai=False, ai_provider='auto', ai_confidence_threshold=0.7,
                          openai_api_key='', anthropic_api_key='', local_llm_url='', local_llm_model=''):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞ SQL —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not mock_mode and not dsn:
        st.warning("‚ö†Ô∏è –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ SQL –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return
    
    # –í–≤–æ–¥ SQL —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    st.markdown("## üîç –ê–Ω–∞–ª–∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞")
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        sql_input = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            height=200,
            placeholder="SELECT u.name, o.total_amount \nFROM users u \nJOIN orders o ON u.id = o.user_id \nWHERE o.total_amount > 1000;",
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è SELECT, WITH, JOIN, –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã"
        )
    
    with col2:
        st.markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
        uploaded_file = st.file_uploader(
            "–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ .sql —Ñ–∞–π–ª:",
            type=['sql'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã .sql"
        )
        
        if uploaded_file is not None:
            sql_input = uploaded_file.getvalue().decode("utf-8")
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:", value=sql_input, height=150)
    
    # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        analyze_button = st.button(
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SQL", 
            type="primary",
            use_container_width=True,
            disabled=not sql_input.strip() or (not mock_mode and not dsn)
        )
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if analyze_button and sql_input.strip():
        with st.spinner("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞..."):
            time.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    
    # –ê–Ω–∞–ª–∏–∑ SQL
    if analyze_button and sql_input.strip():
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            custom_config = {
                'work_mem': work_mem,
                'shared_buffers': shared_buffers,
                'effective_cache_size': effective_cache_size,
                'large_table_threshold': large_table_threshold,
                'expensive_query_threshold': expensive_query_threshold,
                'enable_ai_recommendations': enable_ai,
                'ai_provider': ai_provider,
                'ai_confidence_threshold': ai_confidence_threshold,
                'openai_api_key': openai_api_key,
                'openai_model': st.session_state.get('openai_model', 'gpt-4'),
                'openai_temperature': st.session_state.get('openai_temperature', 0.7),
                'anthropic_api_key': anthropic_api_key,
                'anthropic_model': st.session_state.get('anthropic_model', 'claude-3-sonnet'),
                'local_llm_url': local_llm_url,
                'local_llm_model': local_llm_model
            }
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            analyzer = SQLAnalyzer(dsn, mock_mode, custom_config)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SQL
            result = analyzer.analyze_sql(sql_input)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            display_analysis_results(result, analyzer)
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            st.exception(e)


def display_analysis_results(result, analyzer):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    
    # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    st.success("üéâ –ê–Ω–∞–ª–∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    if result.metrics:
        st.markdown("## üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div class="metric-card">
                <h3>‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
                <h2>{:.2f} –º—Å</h2>
                <p>–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è</p>
            </div>
            """.format(result.metrics.estimated_time_ms), unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="metric-card">
                <h3>üíæ I/O –æ–ø–µ—Ä–∞—Ü–∏–∏</h3>
                <h2>{:.2f} MB</h2>
                <p>–û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</p>
            </div>
            """.format(result.metrics.estimated_io_mb), unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="metric-card">
                <h3>üß† –ü–∞–º—è—Ç—å</h3>
                <h2>{:.2f} MB</h2>
                <p>–û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</p>
            </div>
            """.format(result.metrics.estimated_memory_mb), unsafe_allow_html=True)
        
        with col4:
            st.markdown("""
            <div class="metric-card">
                <h3>üìä –°—Ç—Ä–æ–∫–∏</h3>
                <h2>{:,}</h2>
                <p>–û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</p>
            </div>
            """.format(result.metrics.estimated_rows), unsafe_allow_html=True)
    
    # –°–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if result.plan_summary:
        st.markdown("## üìã –°–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.json(result.plan_summary)
        
        with col2:
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∞
            if result.explain_json:
                create_plan_visualization(result.explain_json)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if result.recommendations:
        st.markdown("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        high_recs = [r for r in result.recommendations if r.priority.value == "high"]
        medium_recs = [r for r in result.recommendations if r.priority.value == "medium"]
        low_recs = [r for r in result.recommendations if r.priority.value == "low"]
        
        # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if high_recs:
            st.markdown("### üö® –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
            for rec in high_recs:
                with st.expander(f"üî¥ {rec.title}", expanded=True):
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {rec.description}")
                    st.markdown(f"**–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:** {rec.potential_improvement}")
                    if rec.sql_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä SQL:**")
                        st.code(rec.sql_example, language="sql")
                    if rec.configuration_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**")
                        st.code(rec.configuration_example, language="sql")
        
        # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if medium_recs:
            st.markdown("### ‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
            for rec in medium_recs:
                with st.expander(f"üü° {rec.title}"):
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {rec.description}")
                    st.markdown(f"**–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:** {rec.potential_improvement}")
                    if rec.sql_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä SQL:**")
                        st.code(rec.sql_example, language="sql")
                    if rec.configuration_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**")
                        st.code(rec.configuration_example, language="sql")
        
        # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if low_recs:
            st.markdown("### ‚ÑπÔ∏è –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
            for rec in low_recs:
                with st.expander(f"üü¢ {rec.title}"):
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {rec.description}")
                    st.markdown(f"**–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:** {rec.potential_improvement}")
                    if rec.sql_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä SQL:**")
                        st.code(rec.sql_example, language="sql")
                    if rec.configuration_example:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**")
                        st.code(rec.configuration_example, language="sql")
    
    # AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    ai_recs = [r for r in result.recommendations if hasattr(r, 'type') and r.type == "ai_recommendation"]
    if ai_recs:
        st.markdown("## ü§ñ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        st.info("üí° –≠—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞")
        
        for rec in ai_recs:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_color = {
                "high": "üî¥",
                "medium": "üü°", 
                "low": "üü¢"
            }.get(rec.priority, "üü°")
            
            with st.expander(f"{priority_color} AI: {rec.description}", expanded=True):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {rec.priority.upper()}")
                    st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {rec.category}")
                    st.markdown(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {rec.confidence:.2f}")
                    if rec.expected_improvement:
                        st.markdown(f"**–û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:** {rec.expected_improvement}")
                
                with col2:
                    if rec.current_query and rec.optimized_query:
                        st.markdown("**–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å:**")
                        st.code(rec.current_query, language="sql")
                        st.markdown("**–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:**")
                        st.code(rec.optimized_query, language="sql")
                
                if rec.reasoning:
                    st.markdown("**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:**")
                    st.info(rec.reasoning)
                
                if rec.llm_model:
                    st.markdown(f"**–ú–æ–¥–µ–ª—å:** {rec.llm_model}")
                
                if rec.additional_suggestions:
                    st.markdown("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**")
                    for suggestion in rec.additional_suggestions:
                        st.markdown(f"‚Ä¢ {suggestion}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.markdown("## üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # JSON —ç–∫—Å–ø–æ—Ä—Ç
        json_report = analyzer.export_analysis_report(result, "json")
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å JSON",
            data=json_report,
            file_name=f"sql_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json",
            use_container_width=True
        )
    
    with col2:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        text_report = analyzer.export_analysis_report(result, "text")
        st.download_button(
            label="üìù –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç",
            data=text_report,
            file_name=f"sql_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            mime="text/plain",
            use_container_width=True
        )
    
    with col3:
        # Raw EXPLAIN JSON
        if result.explain_json:
            st.download_button(
                label="üîç –°–∫–∞—á–∞—Ç—å EXPLAIN",
                data=json.dumps(result.explain_json, indent=2),
                file_name=f"explain_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json",
                use_container_width=True
            )
    
    with col4:
        # PDF —ç–∫—Å–ø–æ—Ä—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å PDF",
            data="PDF content would go here",
            file_name=f"sql_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
            mime="application/pdf",
            use_container_width=True,
            disabled=True,
            help="PDF —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        )
    
    # –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
    with st.expander("üîç –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è")
            if result.is_valid:
                st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–µ–Ω")
            else:
                st.error("‚ùå –ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:")
                for error in result.validation_errors:
                    st.write(f"‚Ä¢ {error}")
        
        with col2:
            st.markdown("### ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            st.json(result.config_used)
        
        st.markdown(f"**‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:** {result.analysis_time:.3f} —Å–µ–∫—É–Ω–¥")


def create_plan_visualization(explain_json):
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–∑–ª—ã –ø–ª–∞–Ω–∞
        def extract_nodes(plan, level=0):
            nodes = []
            if 'Node Type' in plan:
                nodes.append({
                    'level': level,
                    'type': plan['Node Type'],
                    'cost': plan.get('Total Cost', 0),
                    'rows': plan.get('Plan Rows', 0),
                    'width': plan.get('Plan Width', 0)
                })
            
            if 'Plans' in plan:
                for child in plan['Plans']:
                    nodes.extend(extract_nodes(child, level + 1))
            
            return nodes
        
        nodes = extract_nodes(explain_json.get('Plan', {}))
        
        if nodes:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            df = pd.DataFrame(nodes)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
            fig = px.bar(
                df, 
                x='level', 
                y='cost',
                color='type',
                title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                labels={'level': '–£—Ä–æ–≤–µ–Ω—å', 'cost': '–°—Ç–æ–∏–º–æ—Å—Ç—å', 'type': '–¢–∏–ø —É–∑–ª–∞'},
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            
            fig.update_layout(
                height=400,
                showlegend=True,
                xaxis_title="–£—Ä–æ–≤–µ–Ω—å –ø–ª–∞–Ω–∞",
                yaxis_title="–°—Ç–æ–∏–º–æ—Å—Ç—å (cost)"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ
            st.markdown("### üìä –î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞")
            st.dataframe(
                df[['level', 'type', 'cost', 'rows', 'width']].sort_values('level'),
                use_container_width=True
            )
            
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é: {e}")


def show_statistics_tab(dsn, mock_mode):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ pg_stat_statements")
    
    if mock_mode:
        st.info("üìù Mock —Ä–µ–∂–∏–º: –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    elif not dsn:
        st.warning("‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    try:
        analyzer = SQLAnalyzer(dsn, mock_mode)
        stats = analyzer.get_pg_stat_statements(limit=50)
        
        if stats:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(stats)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown("""
                <div class="metric-card">
                    <h3>üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</h3>
                    <h2>{}</h2>
                    <p>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</p>
                </div>
                """.format(len(stats)), unsafe_allow_html=True)
            
            with col2:
                total_calls = df['calls'].sum()
                st.markdown("""
                <div class="metric-card">
                    <h3>üîÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</h3>
                    <h2>{:,}</h2>
                    <p>–í—ã–∑–æ–≤–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤</p>
                </div>
                """.format(total_calls), unsafe_allow_html=True)
            
            with col3:
                total_time = df['total_time'].sum()
                st.markdown("""
                <div class="metric-card">
                    <h3>‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è</h3>
                    <h2>{:.2f} –º—Å</h2>
                    <p>–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è</p>
                </div>
                """.format(total_time), unsafe_allow_html=True)
            
            with col4:
                avg_time = df['mean_time'].mean()
                st.markdown("""
                <div class="metric-card">
                    <h3>üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</h3>
                    <h2>{:.2f} –º—Å</h2>
                    <p>–ù–∞ –∑–∞–ø—Ä–æ—Å</p>
                </div>
                """.format(avg_time), unsafe_allow_html=True)
            
            # –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            st.markdown("## üêå –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            slow_queries = df.nlargest(10, 'total_time')
            
            fig = px.bar(
                slow_queries,
                x='total_time',
                y='query',
                orientation='h',
                title="–¢–æ–ø-10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                labels={'total_time': '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º—Å)', 'query': 'SQL –∑–∞–ø—Ä–æ—Å'},
                color='total_time',
                color_continuous_scale='Reds'
            )
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            st.markdown("## üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            st.dataframe(
                df[['query', 'calls', 'total_time', 'mean_time', 'rows']].head(20),
                use_container_width=True
            )
            
        else:
            st.warning("‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def show_examples_tab(dsn, mock_mode, work_mem, shared_buffers, effective_cache_size,
                      large_table_threshold, expensive_query_threshold):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    st.markdown("## üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    try:
        analyzer = SQLAnalyzer(dsn, mock_mode)
        examples = analyzer.get_example_queries()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        example_tabs = st.tabs([f"üìù {ex['name']}" for ex in examples])
        
        for i, (example, tab) in enumerate(zip(examples, example_tabs)):
            with tab:
                st.markdown(f"### {example['name']}")
                st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {example['description']}")
                
                # SQL –∫–æ–¥ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –±–ª–æ–∫–µ
                st.markdown("**SQL –∑–∞–ø—Ä–æ—Å:**")
                st.code(example['sql'], language="sql")
                
                # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                if st.button(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä {i+1}", key=f"analyze_{i}"):
                    try:
                        with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∏–º–µ—Ä..."):
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                            custom_config = {
                                'work_mem': work_mem,
                                'shared_buffers': shared_buffers,
                                'effective_cache_size': effective_cache_size,
                                'large_table_threshold': large_table_threshold,
                                'expensive_query_threshold': expensive_query_threshold
                            }
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
                            result = analyzer.analyze_sql(example['sql'], custom_config)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                            
                            if result.metrics:
                                col1, col2, col3 = st.columns(3)
                                with col1:
                                    st.metric("‚è±Ô∏è –í—Ä–µ–º—è", f"{result.metrics.estimated_time_ms:.2f} –º—Å")
                                with col2:
                                    st.metric("üíæ I/O", f"{result.metrics.estimated_io_mb:.2f} MB")
                                with col3:
                                    st.metric("üß† –ü–∞–º—è—Ç—å", f"{result.metrics.estimated_memory_mb:.2f} MB")
                            
                            if result.recommendations:
                                st.markdown(f"**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** {len(result.recommendations)} –Ω–∞–π–¥–µ–Ω–æ")
                                for rec in result.recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                    st.write(f"‚Ä¢ {rec.title} ({rec.priority.value})")
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–º–µ—Ä–∞: {e}")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")


def show_execution_plans_tab(dsn, mock_mode):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    st.markdown("## üîç –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    if mock_mode:
        st.info("üìù Mock —Ä–µ–∂–∏–º: –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞–Ω—ã")
    elif not dsn:
        st.warning("‚ö†Ô∏è –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    st.markdown("### üìä –¢–∏–ø—ã —É–∑–ª–æ–≤ –ø–ª–∞–Ω–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **üîç –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**
        - **Seq Scan** - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        - **Index Scan** - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        - **Bitmap Scan** - –±–∏—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        - **Tid Scan** - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ TID
        
        **üîó –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:**
        - **Nested Loop** - –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
        - **Hash Join** - —Ö–µ—à-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        - **Merge Join** - —Å–ª–∏—è–Ω–∏–µ-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        """)
    
    with col2:
        st.markdown("""
        **üìä –û–ø–µ—Ä–∞—Ü–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:**
        - **HashAggregate** - —Ö–µ—à-–∞–≥—Ä–µ–≥–∞—Ü–∏—è
        - **GroupAggregate** - –≥—Ä—É–ø–ø–æ–≤–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
        
        **üìù –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:**
        - **Sort** - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        - **Incremental Sort** - –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        
        **üîÑ –î—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**
        - **Limit** - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        - **WindowAgg** - –æ–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        """)
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤
    st.markdown("### üîç –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞")
    
    plan_json = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ JSON –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (EXPLAIN FORMAT JSON):",
        height=200,
        placeholder='{"Plan": {"Node Type": "Seq Scan", "Total Cost": 100, "Plan Rows": 1000}}',
        help="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã EXPLAIN (FORMAT JSON)"
    )
    
    if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω", use_container_width=True):
        if plan_json.strip():
            try:
                plan_data = json.loads(plan_json)
                st.success("‚úÖ –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω!")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω
                analyzer = SQLAnalyzer(dsn, mock_mode)
                plan_parser = analyzer.plan_parser
                
                # –ü–∞—Ä—Å–∏–º –ø–ª–∞–Ω
                plan = plan_parser.parse_explain_json(plan_data)
                plan_summary = plan_parser.get_plan_summary(plan)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
                st.markdown("### üìã –°–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–∞")
                st.json(plan_summary)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                create_plan_visualization(plan_data)
                
            except json.JSONDecodeError:
                st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–∞: {e}")
        else:
            st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


def show_help_tab():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å–ø—Ä–∞–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    st.markdown("## ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
    
    st.markdown("""
    ## üöÄ PostgreSQL SQL Analyzer
    
    **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ PostgreSQL –≤–µ—Ä—Å–∏–∏ 15+.**
    
    ### ‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    
    - **üîç –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è** - –ø–∞—Ä—Å–∏–Ω–≥ EXPLAIN (FORMAT JSON)
    - **üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤** - –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏, I/O, –ø–∞–º—è—Ç–∏
    - **üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏** - —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
    - **üìà –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏** - —á—Ç–µ–Ω–∏–µ pg_stat_statements
    - **üé≠ Mock —Ä–µ–∂–∏–º** - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    
    ### üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    
    1. **üìù –í–≤–µ–¥–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å** –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ .sql —Ñ–∞–π–ª
    2. **‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** PostgreSQL –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    3. **üîç –ù–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"** –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    4. **üí° –ò–∑—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    5. **üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç** –≤ JSON –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    
    ### üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    - **‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è** - –æ—Ü–µ–Ω–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    - **üíæ I/O –æ–ø–µ—Ä–∞—Ü–∏–∏** - –æ–∂–∏–¥–∞–µ–º—ã–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ MB
    - **üß† –ü–∞–º—è—Ç—å** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ work_mem –∏ shared_buffers
    - **üìä –°—Ç—Ä–æ–∫–∏** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π
    
    ### üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    - **üî¥ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç** - –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - **üü° –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç** - –∑–Ω–∞—á–∏–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
    - **üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç** - —Ç–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    
    ### üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    
    - ‚úÖ –¢–æ–ª—å–∫–æ read-only –æ–ø–µ—Ä–∞—Ü–∏–∏ (SELECT, WITH)
    - ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è SQL –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    - ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pg_stat_statements
    - ‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    
    ### üê≥ –°–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞
    
    ```bash
    # üöÄ –õ–æ–∫–∞–ª—å–Ω–æ
    streamlit run app/streamlit_app.py
    
    # üê≥ Docker
    docker-compose up
    
    # üì± –ù–∞—à —Å–∫—Ä–∏–ø—Ç
    python run_streamlit.py
    ```
    
    ### üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    
    - **üìñ README.md** - –ø–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    - **‚ö° QUICKSTART.md** - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
    - **üìä PROJECT_STATUS.md** - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
    - **üöÄ LAUNCH.md** - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
    - **üìù examples/queries.sql** - –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    
    ### ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    
    - **üêõ –ë–∞–≥–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã** - —Å–æ–∑–¥–∞–π—Ç–µ Issue –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    - **üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è** - –æ–±—Å—É–¥–∏—Ç–µ –≤ Discussions
    - **üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è** - –∏–∑—É—á–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
    - **üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞** - –≤–Ω–µ—Å–∏—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç
    
    ### üìà Roadmap
    
    - **v0.2.0** - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PostgreSQL 16+, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    - **v0.3.0** - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö –°–£–ë–î
    - **v1.0.0** - Production –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    
    ---
    
    **üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PostgreSQL SQL Analyzer!**
    
    **–°–¥–µ–ª–∞–π—Ç–µ SQL –±—ã—Å—Ç—Ä–µ–µ –∏ —É–º–Ω–µ–µ!** üöÄ
    """)


if __name__ == "__main__":
    main()
