"""–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è PostgreSQL SQL Analyzer."""

import streamlit as st
from app.config import settings
from app.ssh_tunnel import ssh_tunnel

from app.ui import (
    apply_custom_styles,
    show_connection_status,
    show_db_overview_tab,
    show_db_config_tab,
    show_statistics_tab,
    show_explain_analysis_tab,
    show_metrics_tab,
    show_logging_tab,
    show_help_tab
)


def test_db_connection(dsn: str) -> tuple[bool, str]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        from app.analyzer import SQLAnalyzer
        analyzer = SQLAnalyzer(dsn)
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
        _ = analyzer.analyze_sql("SELECT 1 as test;")
        return True, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞."
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"


def handle_database_connection(
    connection_type: str,
    dsn: str,
    ssh_host: str,
    ssh_user: str,
    ssh_key_path: str,
    port: int,
    username: str,
    password: str
) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º SSH —Ç—É–Ω–Ω–µ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    with st.spinner("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."):
        try:
            # –°–æ–∑–¥–∞–µ–º SSH —Ç—É–Ω–Ω–µ–ª—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if connection_type == "SSH —Ç—É–Ω–Ω–µ–ª—å" and not ssh_tunnel.is_tunnel_active():
                _ = st.info("üîê –°–æ–∑–¥–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...")
                if ssh_tunnel.create_tunnel(
                    remote_host='localhost',  # PostgreSQL –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
                    remote_port=5433,  # –ü–æ—Ä—Ç PostgreSQL –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    local_port=port,  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
                    ssh_host=ssh_host,
                    ssh_user=ssh_user,
                    ssh_key_path=ssh_key_path
                ):
                    _ = st.success("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    _ = st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—å")
                    return False

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º DSN –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
            dsn_debug = dsn.replace(f"password={password}", "password=***") if password else dsn
            _ = st.info(f"üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å DSN: {dsn_debug}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            success, message = test_db_connection(dsn)
            if success:
                _ = st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î")
                st.session_state.db_connected = True
                st.session_state.connection_dsn = dsn
                return True
            else:
                _ = st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {message}")
                st.session_state.db_connected = False

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫
                if "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É" in message.lower():
                    _ = st.info("üí° **–°–æ–≤–µ—Ç—ã –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫:**\n"
                                + "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω\n"
                                + "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ –∏ –ø–æ—Ä—Ç–∞\n"
                                + "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                elif "role" in message.lower() and "does not exist" in message.lower():
                    _ = st.error("üë§ **–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º PostgreSQL:**\n"
                                 + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    _ = st.info("üîß **–†–µ—à–µ–Ω–∏–µ:**\n"
                                + "1. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `sudo -u postgres createuser {username}`\n"
                                + "2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'postgres'\n"
                                + "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `sudo -u postgres psql -c \"\\du\"`")
                elif "password authentication failed" in message.lower():
                    _ = st.error("üîê **–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:**\n"
                                 + "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    _ = st.info("üîß **–†–µ—à–µ–Ω–∏–µ:**\n"
                                + "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è\n"
                                + "2. –°–±—Ä–æ—Å—å—Ç–µ –ø–∞—Ä–æ–ª—å: `sudo -u postgres psql -c \"ALTER USER {username} PASSWORD 'new_password';\"`")
                return False
        except Exception as e:
            _ = st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            st.session_state.db_connected = False
            return False


def _show_welcome_screen() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–≥–¥–∞ –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞."""
    _ = st.markdown("""
    <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 3rem 2rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        margin: 2rem 0;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    ">
        <h1 style="font-size: 3rem; margin: 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
            üêò PostgreSQL SQL Analyzer
        </h1>
        <p style="font-size: 1.3rem; margin: 1rem 0; opacity: 0.9;">
            –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
        </p>
        <div style="
            background: rgba(255,255,255,0.1);
            padding: 2rem;
            border-radius: 10px;
            margin: 2rem 0;
            backdrop-filter: blur(10px);
        ">
            <h2 style="margin: 0 0 1rem 0; font-size: 1.5rem;">üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</h2>
            <p style="margin: 0; font-size: 1.1rem;">
                –î–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    col1, col2, col3 = st.columns(3)

    with col1:
        _ = st.markdown("""
        <div style="
            background: white;
            padding: 2rem;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border-left: 4px solid #4CAF50;
        ">
            <h3 style="color: #4CAF50; margin: 0 0 1rem 0;">üîç Explain –∞–Ω–∞–ª–∏–∑</h3>
            <p style="color: #666; margin: 0;">
                –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            </p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        _ = st.markdown("""
        <div style="
            background: white;
            padding: 2rem;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border-left: 4px solid #2196F3;
        ">
            <h3 style="color: #2196F3; margin: 0 0 1rem 0;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h3>
            <p style="color: #666; margin: 0;">
                –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏
            </p>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        _ = st.markdown("""
        <div style="
            background: white;
            padding: 2rem;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border-left: 4px solid #FF9800;
        ">
            <h3 style="color: #FF9800; margin: 0 0 1rem 0;">ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫</h3>
            <p style="color: #666; margin: 0;">
                –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            </p>
        </div>
        """, unsafe_allow_html=True)

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
    _ = st.markdown("""
    <div style="
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 10px;
        margin: 2rem 0;
        border: 1px solid #e9ecef;
    ">
        <h3 style="color: #495057; margin: 0 0 1rem 0;">üìã –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:</h3>
        <ol style="color: #6c757d; margin: 0; padding-left: 2rem;">
            <li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏</li>
            <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î"</li>
            <li>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</li>
            <li>–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–æ—â–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∞–Ω–∞–ª–∏–∑–∞!</li>
        </ol>
    </div>
    """, unsafe_allow_html=True)


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="PostgreSQL SQL Analyzer",
        page_icon="üêò",
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items={
            'Get Help': 'https://github.com/your-repo/postgres-sql-analyzer',
            'Report a bug': "https://github.com/your-repo/postgres-sql-analyzer/issues",
            'About': "# PostgreSQL SQL Analyzer\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤"
        }
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
    apply_custom_styles()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    _ = st.markdown("""
    <div class="main-header">
        <h1>üêò PostgreSQL SQL Analyzer</h1>
        <p style="font-size: 1.2rem; margin: 0;">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ PostgreSQL</p>
        <p style="font-size: 1rem; margin: 0; opacity: 0.9;">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤</p>
    </div>
    """, unsafe_allow_html=True)

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    with st.sidebar:
        _ = st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        _ = st.markdown("### üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")

        # –¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_type = st.selectbox(
            "–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            ["SSH —Ç—É–Ω–Ω–µ–ª—å", "–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "Mock —Ä–µ–∂–∏–º"],
            index=0,
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        )

        if connection_type == "Mock —Ä–µ–∂–∏–º":
            _ = st.info("üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            mock_mode = True
            dsn = ""
            host = "localhost"
            port = 5433
            database = "postgres"
            username = "readonly_user"
            password = "skripka_user"
        else:
            mock_mode = False

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            host = settings.DB_HOST
            port = settings.DB_PORT
            database = settings.DB_NAME
            username = settings.DB_USER
            password = settings.DB_PASSWORD
            ssh_host = settings.SSH_HOST
            ssh_port = settings.SSH_PORT
            ssh_user = settings.SSH_USER
            ssh_key_path = settings.SSH_KEY_PATH

            # SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if connection_type == "SSH —Ç—É–Ω–Ω–µ–ª—å":
                _ = st.markdown("#### üîê SSH —Ç—É–Ω–Ω–µ–ª—å")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
                col1, col2 = st.columns(2)
                with col1:
                    _ = st.text_input("SSH —Ö–æ—Å—Ç", value=ssh_host, disabled=True, help="–ò–∑ .env —Ñ–∞–π–ª–∞")
                    _ = st.text_input("SSH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=ssh_user, disabled=True, help="–ò–∑ .env —Ñ–∞–π–ª–∞")
                with col2:
                    _ = st.number_input("SSH –ø–æ—Ä—Ç", value=ssh_port, disabled=True, help="–ò–∑ .env —Ñ–∞–π–ª–∞")
                    _ = st.text_input("SSH –∫–ª—é—á", value=ssh_key_path, disabled=True, help="–ò–∑ .env —Ñ–∞–π–ª–∞")

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            _ = st.markdown("#### üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
            col1, col2 = st.columns(2)
            with col1:
                _ = st.text_input("–•–æ—Å—Ç –ë–î", value=host, disabled=True, help="–ò–∑ .env —Ñ–∞–π–ª–∞")
                _ = st.text_input("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", value=database, disabled=True, help="–ò–∑ .env —Ñ–∞–π–ª–∞")
            with col2:
                _ = st.number_input("–ü–æ—Ä—Ç –ë–î", value=port, disabled=True, help="–ò–∑ .env —Ñ–∞–π–ª–∞")
                _ = st.text_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=username, disabled=True, help="–ò–∑ .env —Ñ–∞–π–ª–∞")

            # –§–æ—Ä–º–∏—Ä—É–µ–º DSN
            if connection_type == "SSH —Ç—É–Ω–Ω–µ–ª—å":
                # –î–ª—è SSH —Ç—É–Ω–Ω–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
                dsn = (f"host=localhost port={port} dbname={database} "
                       f"user={username} password={password} connect_timeout=10")
            else:
                # –î–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ö–æ—Å—Ç
                dsn = (f"host={host} port={port} dbname={database} "
                       f"user={username} password={password} connect_timeout=10")

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è DSN (—Å–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å)
            dsn_debug = dsn.replace(f"password={password}", "password=***") if password else dsn
            _ = st.text_input("DSN (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)", value=dsn_debug, disabled=True,
                              help="–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
        _ = st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL")
        col1, col2 = st.columns(2)
        with col1:
            _ = st.number_input("work_mem (MB)", value=4, min_value=1,
                                max_value=2048, help="–ü–∞–º—è—Ç—å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
        with col2:
            _ = st.number_input("shared_buffers (MB)", value=128,
                                min_value=1, max_value=8192, help="–ë—É—Ñ–µ—Ä–Ω—ã–π –∫–µ—à")

        _ = st.number_input("effective_cache_size (GB)", value=4,
                            min_value=1, max_value=64, help="–†–∞–∑–º–µ—Ä –∫–µ—à–∞ –û–°")

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–±—Ä–∞–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ
        with st.expander("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI", expanded=True):
            # –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM
            llm_provider = st.selectbox(
                "–ü—Ä–æ–≤–∞–π–¥–µ—Ä AI",
                ["OpenAI", "Anthropic", "–õ–æ–∫–∞–ª—å–Ω—ã–π LLM", "–û—Ç–∫–ª—é—á–∏—Ç—å AI"],
                index=0 if settings.AI_PROVIDER == "openai" else 3,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            )

            if llm_provider == "OpenAI":
                openai_api_key = st.text_input(
                    "OpenAI API Key",
                    value=settings.OPENAI_API_KEY if settings.OPENAI_API_KEY else "",
                    type="password",
                    help="API –∫–ª—é—á OpenAI (–∏–∑ .env —Ñ–∞–π–ª–∞)"
                )

                # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ OpenAI
                models = [
                    "gpt-4o-mini",  # –°–∞–º–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å
                    "gpt-4o",       # –ù–æ–≤–∞—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
                    "gpt-4-turbo",  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å GPT-4
                    "gpt-4",        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è GPT-4
                    "gpt-3.5-turbo"  # –≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å
                ]
                default_model_index = models.index(settings.OPENAI_MODEL) if settings.OPENAI_MODEL in models else 0
                openai_model = st.selectbox(
                    "–ú–æ–¥–µ–ª—å OpenAI",
                    models,
                    index=default_model_index,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å OpenAI (gpt-4o-mini —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏)"
                )

                temperature = st.slider(
                    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    min_value=0.0,
                    max_value=2.0,
                    value=settings.OPENAI_TEMPERATURE,
                    step=0.1,
                    help="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ (0.0 - –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ, 2.0 - –æ—á–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ)"
                )

                enable_ai = settings.ENABLE_AI_RECOMMENDATIONS
                anthropic_api_key = ""
                local_llm_url = ""
                local_llm_model = ""

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
                st.session_state['enable_ai'] = enable_ai
                st.session_state['ai_provider'] = llm_provider
                st.session_state['openai_api_key'] = openai_api_key
                st.session_state['openai_model'] = openai_model
                st.session_state['openai_temperature'] = temperature

            elif llm_provider == "Anthropic":
                anthropic_api_key = st.text_input(
                    "Anthropic API Key",
                    value="",
                    type="password",
                    help="API –∫–ª—é—á Anthropic"
                )

                anthropic_model = st.selectbox(
                    "–ú–æ–¥–µ–ª—å Anthropic",
                    [
                        "claude-3-5-sonnet-20241022",  # –°–∞–º–∞—è –Ω–æ–≤–∞—è –∏ –º–æ—â–Ω–∞—è
                        "claude-3-5-sonnet-20240620",  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è
                        "claude-3-opus-20240229",      # –°–∞–º–∞—è –º–æ—â–Ω–∞—è
                        "claude-3-sonnet-20240229",    # –ë–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
                        "claude-3-haiku-20240307"      # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è
                    ],
                    index=1,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Anthropic"
                )

                temperature = st.slider(
                    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    min_value=0.0,
                    max_value=1.0,
                    value=0.7,
                    step=0.1,
                    help="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤"
                )

                enable_ai = True
                openai_api_key = ""
                openai_model = "gpt-4o-mini"
                local_llm_url = ""
                local_llm_model = ""

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
                st.session_state['enable_ai'] = enable_ai
                st.session_state['ai_provider'] = llm_provider
                st.session_state['anthropic_api_key'] = anthropic_api_key
                st.session_state['anthropic_model'] = anthropic_model
                st.session_state['anthropic_temperature'] = temperature

            elif llm_provider == "–õ–æ–∫–∞–ª—å–Ω—ã–π LLM":
                local_llm_url = st.text_input(
                    "URL –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM",
                    value="http://localhost:11434",
                    help="URL —Å–µ—Ä–≤–µ—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ollama)"
                )

                local_llm_model = st.selectbox(
                    "–ú–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM",
                    [
                        "llama3.1:8b",      # Llama 3.1 8B
                        "llama3.1:70b",     # Llama 3.1 70B
                        "llama3:8b",        # Llama 3 8B
                        "llama3:70b",       # Llama 3 70B
                        "codellama:7b",     # Code Llama 7B
                        "codellama:13b",    # Code Llama 13B
                        "mistral:7b",       # Mistral 7B
                        "qwen:7b",          # Qwen 7B
                        "custom"            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å
                    ],
                    index=0,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM"
                )

                if local_llm_model == "custom":
                    local_llm_model = st.text_input("–ò–º—è –º–æ–¥–µ–ª–∏", value="", help="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏")

                temperature = st.slider(
                    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    min_value=0.0,
                    max_value=2.0,
                    value=0.7,
                    step=0.1,
                    help="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤"
                )

                enable_ai = True
                openai_api_key = ""
                openai_model = "gpt-4o-mini"
                anthropic_api_key = ""

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
                st.session_state['enable_ai'] = enable_ai
                st.session_state['ai_provider'] = llm_provider
                st.session_state['local_llm_url'] = local_llm_url
                st.session_state['local_llm_model'] = local_llm_model
                st.session_state['local_llm_temperature'] = temperature

            else:  # –û—Ç–∫–ª—é—á–∏—Ç—å AI
                enable_ai = False
                openai_api_key = ""
                openai_model = "gpt-4o-mini"
                anthropic_api_key = ""
                local_llm_url = ""
                local_llm_model = ""
                temperature = 0.7
                _ = st.info("üö´ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
                st.session_state['enable_ai'] = enable_ai
                st.session_state['ai_provider'] = llm_provider

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            _ = st.markdown("#### üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
            enable_proxy = st.checkbox(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SOCKS5 –ø—Ä–æ–∫—Å–∏",
                value=True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω
                help="SOCKS5 –ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–Ω–µ—à–Ω–∏–º AI —Å–µ—Ä–≤–∏—Å–∞–º"
            )

            if enable_proxy:
                proxy_host = st.text_input(
                    "–•–æ—Å—Ç –ø—Ä–æ–∫—Å–∏",
                    value="localhost",
                    help="–ê–¥—Ä–µ—Å SOCKS5 –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"
                )
                proxy_port = st.number_input(
                    "–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏",
                    value=1080,
                    min_value=1,
                    max_value=65535,
                    help="–ü–æ—Ä—Ç SOCKS5 –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"
                )
            else:
                proxy_host = "localhost"
                proxy_port = 1080

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
            st.session_state['enable_proxy'] = enable_proxy
            st.session_state['proxy_host'] = proxy_host
            st.session_state['proxy_port'] = proxy_port

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
            if enable_ai:
                _ = st.markdown("#### üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI")
                confidence_threshold = st.slider(
                    "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                    min_value=0.0,
                    max_value=1.0,
                    value=settings.AI_CONFIDENCE_THRESHOLD,
                    step=0.1,
                    help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
                )
                st.session_state['ai_confidence_threshold'] = confidence_threshold
            else:
                st.session_state['ai_confidence_threshold'] = settings.AI_CONFIDENCE_THRESHOLD

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–≤ –∫–æ–Ω—Ü–µ sidebar)
        _ = st.markdown("---")
        _ = st.markdown("#### üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")

        if st.button("üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î", use_container_width=True, type="primary"):
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            _ = handle_database_connection(connection_type, dsn, ssh_host, ssh_user,
                                           ssh_key_path, port, username, password)
        else:
            st.session_state.db_connected = False


        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        with st.expander("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"):
            _ = st.markdown("""
            **PostgreSQL SQL Analyzer** - —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è:
            
            ‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
            ‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            ‚Ä¢ ü§ñ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            ‚Ä¢ üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
            
            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PostgreSQL 12+ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ AI-–º–æ–¥–µ–ª–∏.
            """)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if 'db_connected' in st.session_state and st.session_state.db_connected:
        _ = show_connection_status(dsn)
    else:
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–≥–¥–∞ –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
        _show_welcome_screen()
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
        "üóÑÔ∏è –û–±–∑–æ—Ä –ë–î",
        "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î",
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        "üîç Explain –∞–Ω–∞–ª–∏–∑",
        "üìà –ú–µ—Ç—Ä–∏–∫–∏",
        "üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "‚ùì –ü–æ–º–æ—â—å"
    ])

    with tab1:
        show_db_overview_tab(dsn, mock_mode)

    with tab2:
        show_db_config_tab(dsn, mock_mode)

    with tab3:
        show_statistics_tab(dsn, mock_mode)

    with tab4:
        show_explain_analysis_tab(dsn, mock_mode)

    with tab5:
        show_metrics_tab(dsn, mock_mode)

    with tab6:
        show_logging_tab(dsn, mock_mode)

    with tab7:
        show_help_tab()


if __name__ == "__main__":
    main()
