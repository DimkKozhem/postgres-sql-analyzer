#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SSH."""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from app.config import settings
from app.ssh_tunnel import test_ssh_connection, test_db_connection, ssh_tunnel_context
from app.database import create_database_connection, get_connection_for_user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_ssh_tunnel():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SSH —Ç—É–Ω–Ω–µ–ª—å."""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è ===")
    
    if not settings.SSH_HOST:
        logger.warning("SSH_HOST –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç SSH")
        return False
    
    if test_ssh_connection():
        logger.info("‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        logger.error("‚ùå SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False


def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        db_conn = create_database_connection()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        with db_conn.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT version();")
                version = cur.fetchone()
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"–í–µ—Ä—Å–∏—è: {version[0] if version else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def test_different_users():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ===")
    
    users = [
        ("default", "readonly_user"),
        ("admin", "admin_user"),
        ("super", "postgres")
    ]
    
    for user_type, user_name in users:
        try:
            logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}")
            db_conn = get_connection_for_user(user_type)
            
            with db_conn.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT current_user;")
                    current_user = cur.fetchone()
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}: {current_user[0] if current_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}: {e}")


def test_ssh_tunnel_with_db():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SSH —Ç—É–Ω–Ω–µ–ª—å —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è —Å –ë–î ===")
    
    if not settings.AUTO_CREATE_SSH_TUNNEL:
        logger.info("AUTO_CREATE_SSH_TUNNEL –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return True
    
    try:
        with ssh_tunnel_context() as tunnel:
            if tunnel.is_tunnel_active():
                logger.info("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª—å
                db_conn = create_database_connection()
                with db_conn.get_connection() as conn:
                    with conn.cursor() as cur:
                        cur.execute("SELECT inet_server_addr(), inet_server_port();")
                        result = cur.fetchone()
                        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ")
                        logger.info(f"–°–µ—Ä–≤–µ—Ä: {result[0] if result else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}, –ü–æ—Ä—Ç: {result[1] if result else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                
                return True
            else:
                logger.error("‚ùå SSH —Ç—É–Ω–Ω–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ SSH —Ç—É–Ω–Ω–µ–ª—è —Å –ë–î: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    logger.info(f"  DB_HOST: {settings.DB_HOST}")
    logger.info(f"  DB_PORT: {settings.DB_PORT}")
    logger.info(f"  DB_USER: {settings.DB_USER}")
    logger.info(f"  SSH_HOST: {settings.SSH_HOST}")
    logger.info(f"  SSH_USER: {settings.SSH_USER}")
    logger.info(f"  AUTO_CREATE_SSH_TUNNEL: {settings.AUTO_CREATE_SSH_TUNNEL}")
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SSH
    if settings.SSH_HOST:
        results.append(test_ssh_tunnel())
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    results.append(test_database_connection())
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_different_users()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SSH —Ç—É–Ω–Ω–µ–ª—å —Å –ë–î
    if settings.AUTO_CREATE_SSH_TUNNEL:
        results.append(test_ssh_tunnel_with_db())
    
    # –ò—Ç–æ–≥–∏
    logger.info("=== –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    if all(results):
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return 1


if __name__ == "__main__":
    sys.exit(main())
