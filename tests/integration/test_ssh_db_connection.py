#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —á–µ—Ä–µ–∑ SSH —Ç—É–Ω–Ω–µ–ª—å."""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, str(Path(__file__).parent))

from app.ssh_tunnel import test_ssh_connection, test_db_connection, ssh_tunnel_context
from app.config import settings
from app.analyzer import SQLAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_ssh_tunnel():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SSH —Ç—É–Ω–Ω–µ–ª—å."""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    if not settings.SSH_HOST or not settings.SSH_USER:
        print("‚ùå SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   - SQL_ANALYZER_SSH_HOST")
        print("   - SQL_ANALYZER_SSH_USER")
        print("   - SQL_ANALYZER_SSH_KEY_PATH")
        return False
    
    print(f"   SSH —Ö–æ—Å—Ç: {settings.SSH_HOST}")
    print(f"   SSH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {settings.SSH_USER}")
    print(f"   SSH –∫–ª—é—á: {settings.SSH_KEY_PATH}")
    
    if test_ssh_connection():
        print("‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return False


def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    if not settings.DB_HOST or not settings.DB_NAME or not settings.DB_USER:
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–¥–∞–Ω—ã")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   - SQL_ANALYZER_DB_HOST")
        print("   - SQL_ANALYZER_DB_NAME")
        print("   - SQL_ANALYZER_DB_USER")
        print("   - SQL_ANALYZER_DB_PASSWORD")
        return False
    
    print(f"   –ë–î —Ö–æ—Å—Ç: {settings.DB_HOST}")
    print(f"   –ë–î –ø–æ—Ä—Ç: {settings.DB_PORT}")
    print(f"   –ë–î –∏–º—è: {settings.DB_NAME}")
    print(f"   –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {settings.DB_USER}")
    
    if test_db_connection():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False


def test_ssh_tunnel_with_db():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SSH —Ç—É–Ω–Ω–µ–ª—å —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î."""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è —Å –ë–î...")
    
    try:
        with ssh_tunnel_context():
            if test_db_connection():
                print("‚úÖ SSH —Ç—É–Ω–Ω–µ–ª—å —Å –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —á–µ—Ä–µ–∑ SSH —Ç—É–Ω–Ω–µ–ª—å")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SSH —Ç—É–Ω–Ω–µ–ª—è: {e}")
        return False


def test_sql_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SQL –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        dsn = f"host={settings.DB_HOST} port={settings.DB_PORT} dbname={settings.DB_NAME} user={settings.DB_USER} password={settings.DB_PASSWORD}"
        analyzer = SQLAnalyzer(dsn)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        test_sql = "SELECT 1 as test_column;"
        result = analyzer.analyze_sql(test_sql)
        
        if result.is_valid:
            print("‚úÖ SQL –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result.analysis_time:.3f} —Å–µ–∫")
            if result.metrics:
                print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.metrics.estimated_time_ms:.2f} –º—Å")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ SQL")
            for error in result.validation_errors:
                print(f"   - {error}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQL –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üêò PostgreSQL SQL Analyzer - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env_template.txt –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {env_file.absolute()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    tests = [
        ("SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_ssh_tunnel),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("SSH —Ç—É–Ω–Ω–µ–ª—å —Å –ë–î", test_ssh_tunnel_with_db),
        ("SQL –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", test_sql_analyzer),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
